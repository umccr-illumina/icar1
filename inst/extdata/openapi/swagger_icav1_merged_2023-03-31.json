{
  "swagger": "2.0",
  "info": {
    "title": "Workflow Execution Service",
    "version": "v1"
  },
  "host": "aps2.platform.illumina.com",
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "paths": {
    "/v1/workflows": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get a list of workflows",
        "description": "Gets a list of workflows.",
        "operationId": "listWorkflows",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "tenantId",
            "description": "ID of the tenant",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "in": "query",
            "name": "categories",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "include",
            "description": "Comma-separated list of properties to include in the response",
            "type": "array",
            "items": {
              "enum": [
                "totalItemCount"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.",
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).",
            "type": "string",
            "default": "timeCreated asc"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged list of workflows.",
            "schema": {
              "$ref": "#/definitions/WorkflowList"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Create a workflow",
        "description": "Creates a new workflow and version (if provided).",
        "operationId": "createWorkflow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateWorkflowRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Details of the newly created workflow.",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "A conflict was found. Ensure the workflow name is unique.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/workflows/{workflowId}": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get the details of a workflow",
        "description": "Gets the details of a workflow with a given ID.",
        "operationId": "getWorkflow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "ID of the workflow",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the workflow.",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "404": {
            "description": "The workflow with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Workflows"
        ],
        "summary": "Update an existing workflow",
        "description": "Updates the workflow with a given ID.",
        "operationId": "updateWorkflow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "ID of the workflow",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateWorkflowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns updated workflow.",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "404": {
            "description": "The workflow with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "A conflict was found. Ensure the workflow name is unique.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/workflows/runs": {
      "get": {
        "tags": [
          "Workflow Runs"
        ],
        "summary": "Get a list of workflow runs",
        "description": "Gets a list of workflow runs.",
        "operationId": "listWorkflowRuns",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "type": "array",
            "items": {
              "enum": [
                "aborted",
                "aborting",
                "failed",
                "new",
                "running",
                "submitted",
                "succeeded",
                "timedOut"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tenantId",
            "description": "ID of the tenant",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Comma-separated list of properties to include in the response",
            "type": "array",
            "items": {
              "enum": [
                "totalItemCount"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.",
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).",
            "type": "string",
            "default": "timeCreated asc"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged list of workflow runs that the user has access to.",
            "schema": {
              "$ref": "#/definitions/WorkflowRunList"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/workflows/runs/{runId}": {
      "get": {
        "tags": [
          "Workflow Runs"
        ],
        "summary": "Get the details of a workflow run",
        "description": "Gets the details of a workflow run with a given ID.",
        "operationId": "getWorkflowRun",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "runId",
            "description": "ID of the workflow run",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Comma-separated list of properties to include in the response",
            "type": "array",
            "items": {
              "enum": [
                "definition",
                "engineParameters"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the workflow run.",
            "schema": {
              "$ref": "#/definitions/WorkflowRun"
            }
          },
          "404": {
            "description": "The workflow run with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/workflows/runs/{runId}:abort": {
      "put": {
        "tags": [
          "Workflow Runs"
        ],
        "summary": "Abort a workflow run",
        "description": "Aborts the workflow run with a given ID.",
        "operationId": "abortWorkflowRun",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "runId",
            "description": "ID of the workflow run",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Comma-separated list of properties to include in the response",
            "type": "array",
            "items": {
              "enum": [
                "definition",
                "engineParameters"
              ],
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AbortWorkflowRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the aborted workflow run.",
            "schema": {
              "$ref": "#/definitions/WorkflowRun"
            }
          },
          "404": {
            "description": "The workflow run with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/workflows/runs/{runId}/history": {
      "get": {
        "tags": [
          "Workflow Runs"
        ],
        "summary": "Get a list of workflow run history events",
        "description": "Gets a list of history events for a workflow run with a given ID.",
        "operationId": "listWorkflowRunHistory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "runId",
            "description": "ID of the workflow run",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "default": "eventId asc"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Comma-separated list of properties to include in the response",
            "type": "array",
            "items": {
              "enum": [
                "totalItemCount"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.",
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged list of workflow run history events.",
            "schema": {
              "$ref": "#/definitions/WorkflowRunHistoryEventList"
            }
          },
          "404": {
            "description": "The workflow run with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/workflows/signals/{signalId}": {
      "get": {
        "tags": [
          "Workflow Signals"
        ],
        "summary": "Get the details of a workflow signal",
        "description": "Gets the details of a workflow signal with a given ID.",
        "operationId": "getSignal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "signalId",
            "description": "ID of the workflow signal",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the workflow signal.",
            "schema": {
              "$ref": "#/definitions/WorkflowSignal"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The signal with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/workflows/signals": {
      "get": {
        "tags": [
          "Workflow Signals"
        ],
        "summary": "Get a list of workflow signals",
        "description": "Gets a list of workflow signals.",
        "operationId": "listSignals",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "tenantId",
            "description": "ID of the tenant",
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Comma-separated list of properties to include in the response",
            "type": "array",
            "items": {
              "enum": [
                "totalItemCount"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.",
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).",
            "type": "string",
            "default": "timeCreated asc"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged list of workflow signals that the user has access to.",
            "schema": {
              "$ref": "#/definitions/WorkflowSignalList"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/workflows/signals/{signalId}:succeed": {
      "patch": {
        "tags": [
          "Workflow Signals"
        ],
        "summary": "Succeed a workflow signal",
        "description": "Responds to a pending workflow signal with a successful result.",
        "operationId": "succeedSignal",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "signalId",
            "description": "ID of the workflow signal",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SucceedWorkflowSignalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the succeeded signal.",
            "schema": {
              "$ref": "#/definitions/WorkflowSignal"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The signal with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "The workflow signal is no longer active.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/workflows/signals/{signalId}:fail": {
      "patch": {
        "tags": [
          "Workflow Signals"
        ],
        "summary": "Fail a workflow signal",
        "description": "Responds to a pending workflow signal with a failure result.",
        "operationId": "failSignal",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "signalId",
            "description": "ID of the workflow signal",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/FailWorkflowSignalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the failed signal.",
            "schema": {
              "$ref": "#/definitions/WorkflowSignal"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The signal with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "The workflow signal is no longer active.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/workflows/{workflowId}/versions/{versionName}": {
      "get": {
        "tags": [
          "Workflow Versions"
        ],
        "summary": "Get the details of a workflow version",
        "description": "Gets the details for a workflow version with a given workflow ID and version name.",
        "operationId": "getWorkflowVersion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "ID of the workflow",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "versionName",
            "description": "Name of the workflow version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the workflow version.",
            "schema": {
              "$ref": "#/definitions/WorkflowVersion"
            }
          },
          "404": {
            "description": "The workflow ID or version name was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Workflow Versions"
        ],
        "summary": "Update an existing workflow version",
        "description": "Updates an existing workflow version. Note: The Version, Definition, and Status cannot be changed simultaneously. Only one of these can be changed per API call.",
        "operationId": "updateWorkflowVersion",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "ID of the workflow",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "versionName",
            "description": "Name of the workflow version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateWorkflowVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the created workflow run.",
            "schema": {
              "$ref": "#/definitions/WorkflowVersion"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "A conflict was found. Ensure the workflow version name is unique.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The workflow ID or version name was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/workflows/{workflowId}/versions": {
      "get": {
        "tags": [
          "Workflow Versions"
        ],
        "summary": "Get a list of workflow versions",
        "description": "Gets a list of workflow versions with a given workflow ID.",
        "operationId": "listWorkflowVersions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "ID of the workflow",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Comma-separated list of properties to include in the response",
            "type": "array",
            "items": {
              "enum": [
                "totalItemCount"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.",
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).",
            "type": "string",
            "default": "timeCreated asc"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged list of workflow versions that the user has access to.",
            "schema": {
              "$ref": "#/definitions/WorkflowVersionList"
            }
          },
          "404": {
            "description": "The workflow with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Workflow Versions"
        ],
        "summary": "Create a new workflow version",
        "description": "Creates a new workflow version with a given workflow ID.",
        "operationId": "createWorkflowVersion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "ID of the workflow",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateWorkflowVersionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Details of the created workflow version.",
            "schema": {
              "$ref": "#/definitions/WorkflowVersion"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "A conflict was found. Ensure the workflow version name is unique.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/workflows/versions": {
      "get": {
        "tags": [
          "Workflow Versions"
        ],
        "summary": "Get a list of all workflow versions",
        "description": "Gets a list of workflow versions across all workflows.",
        "operationId": "listAllWorkflowVersions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "tenantId",
            "description": "ID of the tenant",
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Comma-separated list of properties to include in the response",
            "type": "array",
            "items": {
              "enum": [
                "totalItemCount"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.",
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).",
            "type": "string",
            "default": "timeCreated asc"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged list of workflow versions across all workflows.",
            "schema": {
              "$ref": "#/definitions/WorkflowVersionList"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/workflows/{workflowId}/versions/{versionName}:launch": {
      "post": {
        "tags": [
          "Workflow Versions"
        ],
        "summary": "Launch a workflow version",
        "description": "Launches a workflow version with a given workflow ID and version name.",
        "operationId": "launchWorkflowVersion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "ID of the workflow",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "versionName",
            "description": "Name of the workflow version",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Comma-separated list of properties to include in the response",
            "type": "array",
            "items": {
              "enum": [
                "definition",
                "engineParameters"
              ],
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/LaunchWorkflowVersionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Details of the created workflow run.",
            "schema": {
              "$ref": "#/definitions/WorkflowRun"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get a list of tasks",
        "description": "Gets a list of tasks accessible by the current tenant ID.",
        "operationId": "listTasks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "names",
            "description": "Name: Optional parameter to filter the returned list. Case-Sensitive",
            "type": "string"
          },
          {
            "in": "query",
            "name": "acls",
            "description": "Name: Optional parameter to filter the returned list. Case-Sensitive",
            "type": "string"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Optional parameter to define the page size returned. Valid inputs range from 1-1000.",
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, timeCreated, timeModified.\r\nThe sort can be specified as asc or desc. (Default: asc.)",
            "type": "string",
            "default": "timeCreated asc"
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken,\r\nnextPageToken, and previousPageToken (provided in the list response)",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TaskSummaryPagedItems"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create a Task",
        "description": "Creates a task. Returns the ID associated with the new task. Also returns the task version ID associated with the new task, if provided. Substitutions can be defined in the following format: \"{{string}}\", and specified at launch time.",
        "operationId": "createTask",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateTaskRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/tasks/{taskId}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get the details of a Task",
        "description": "Gets the details of a Task for a given task ID.",
        "operationId": "getTask",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TaskSummary"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update an existing task.",
        "description": "Updates the task with a given ID. The task's name, description can be updated. The task's name must remain unique.",
        "operationId": "updateTask",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Details of the task to be updated.",
            "schema": {
              "$ref": "#/definitions/UpdateTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/tasks/runs": {
      "get": {
        "tags": [
          "Task Runs"
        ],
        "summary": "Get a list of task runs",
        "description": "Get a list of task runs accessible by the current tenant ID.",
        "operationId": "listTaskRuns",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "sort",
            "description": "Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, status, timeCreated, timeModified.\r\nThe sort can be specified as asc or desc. (Default: asc.)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "names",
            "type": "string"
          },
          {
            "in": "query",
            "name": "status",
            "type": "string"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "string"
          },
          {
            "in": "query",
            "name": "acls",
            "type": "string"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Optional parameter to define the page size returned. Valid inputs range from 1-1000.",
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken,\r\nnextPageToken, and previousPageToken (provided in the list response)",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TaskRunSummaryPagedItems"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Task Runs"
        ],
        "summary": "Create and launch a task run",
        "description": "Creates and launches a task run. Returns the ID and status associated with the new task run.",
        "operationId": "createTaskRun",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateTaskRunRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TaskRun"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/tasks/runs/{runId}": {
      "get": {
        "tags": [
          "Task Runs"
        ],
        "summary": "Get the status of a task run",
        "description": "Gets the status of a task run for a given task run ID.",
        "operationId": "getTaskRun",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "runId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TaskRun"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/tasks/runs/{runId}:abort": {
      "put": {
        "tags": [
          "Task Runs"
        ],
        "summary": "Abort a task run",
        "description": "Aborts a task run for a given task run ID. The task run is required to have a status of \"Pending\" or \"Running\".",
        "operationId": "abortTaskRun",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "runId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TaskRunSummary"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/tasks/runs/{runId}:heartbeat": {
      "post": {
        "tags": [
          "Task Runs"
        ],
        "summary": "Heartbeat for a task run",
        "description": "Heartbeat a task run for a given task run ID. This notifies TES that a task run is executing.",
        "operationId": "heartbeatTaskRun",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "runId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/HeartbeatTaskRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TaskRunHeartbeat"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/tasks/{taskId}/versions": {
      "get": {
        "tags": [
          "Task Versions"
        ],
        "summary": "Get a list of versions",
        "description": "Gets a list of task versions within the given task accessible by the current tenant ID.",
        "operationId": "listTaskVersions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, version, timeCreated, timeModified.\r\nThe sort can be specified as asc or desc. (Default: asc.)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ids",
            "type": "string"
          },
          {
            "in": "query",
            "name": "acls",
            "type": "string"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Optional parameter to define the page size returned. Valid inputs range from 1-1000.",
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken,\r\nnextPageToken, and previousPageToken (provided in the list response)",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TaskVersionSummaryPagedItems"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Task Versions"
        ],
        "summary": "Create a task version",
        "description": "Creates a new task version within an existing task. Returns the ID associated with the new task version. Substitutions can be defined in the following format: \"{{string}}\", and specified at launch time.",
        "operationId": "createTaskVersion",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateTaskVersionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TaskVersion"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/tasks/{taskId}/versions/{versionId}": {
      "get": {
        "tags": [
          "Task Versions"
        ],
        "summary": "Get the details of a task version",
        "description": "Gets details of a task version for a given task version ID.",
        "operationId": "getTaskVersion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "versionId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TaskVersion"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Task Versions"
        ],
        "summary": "Update task version properties",
        "description": "Update details of a task version for a given task version ID.",
        "operationId": "updateTaskVersion",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "versionId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateTaskVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TaskVersion"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/tasks/{taskId}/versions/{versionId}:launch": {
      "post": {
        "tags": [
          "Task Versions"
        ],
        "summary": "Launch a task version",
        "description": "Launches a task version for a given task version ID. Returns the ID associated with the new task run. Substitutions defined in the task version must be specified.",
        "operationId": "launchTaskRun",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "versionId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/LaunchTaskRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TaskRun"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/files/{fileId}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get details about a file, including a pre-signed URL for download",
        "description": "Get information and details for the specified file ID, including metadata and a pre-signed URL for file download. The URL can be used as a curl command or directly with S3.",
        "operationId": "getFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "description": "Unique identifier for the file to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "tenantId",
            "description": "Optional parameter to see shared data in another tenant",
            "type": "string"
          },
          {
            "in": "query",
            "name": "presignedUrlMode",
            "description": "Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior.\r\n            Possible values: Attachment, Inline, Browser",
            "type": "string"
          },
          {
            "in": "query",
            "name": "includeVolumeMetadata",
            "description": "Optional parameter to return volume's metadata",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "metadata.include",
            "description": "Optional parameter to specify comma separated patterns to include metadata by their field names.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata.exclude",
            "description": "Optional parameter to specify comma separated patterns to exclude metadata by their field names.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Optionally include additional fields in the response.\r\n            Possible values: ObjectStoreAccess",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/FileResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "File not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Files"
        ],
        "summary": "Update a file entry in GDS and get temporary credentials for upload",
        "description": "Update a file entry in GDS. Returns temporary credentials and presigned url(s) for file upload directly to S3 when the include=objectStoreAccess parameter is used. Note that the currently supported changes to the file resource are updating the file type and the underlying content.",
        "operationId": "updateFile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "description": "Unique identifier for the file to be updated.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Optionally include additional fields in the response.\r\n            Possible values: ObjectStoreAccess",
            "type": "string"
          },
          {
            "in": "query",
            "name": "uploadPartCount",
            "description": "Optional number of parts for the presigned url for uploads (1 - 10000)",
            "type": "integer",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/UpdateFileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/FileWriteableResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "File not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Permanently delete a file",
        "description": "Permanently delete a file entry and its underlying content",
        "operationId": "deleteFile",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "description": "Unique identifier for the file to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "File not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/files": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Create a file entry in GDS and get temporary credentials for upload",
        "description": "Create a file entry in GDS. Returns temporary credentials and presigned url(s) for file upload directly to S3 when the include=objectStoreAccess parameter is used. Volume ID or volume name is required for file creation. If a folder path is provided and does not exist, GDS creates the folder path in the appropriate account automatically.",
        "operationId": "createFile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "include",
            "description": "Optionally include additional fields in the response.\r\n            Possible values: ObjectStoreAccess",
            "type": "string"
          },
          {
            "in": "query",
            "name": "uploadPartCount",
            "description": "Optional number of parts for the presigned url for uploads (1 - 10000)",
            "type": "integer",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateFileRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created new File.",
            "schema": {
              "$ref": "#/definitions/FileWriteableResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "A conflict was found. Make sure the new File doesn't already exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Files"
        ],
        "summary": "Updates list of files with metadata",
        "description": "Updates list of files with metadata",
        "operationId": "bulkFileUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/BulkFileUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/BulkFileUpdateResponse"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/BulkFileUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get a list of files",
        "description": "Given a volumeId or volume name, get a list of files accessible by the JWT. The default sort returned is alphabetical, ascending. The default page size is 10 items",
        "operationId": "listFiles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "volume.id",
            "description": "Optional field that specifies comma-separated volume IDs to include in the list",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "in": "query",
            "name": "volume.name",
            "description": "Optional field that specifies comma-separated volume names to include in the list",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "in": "query",
            "name": "path",
            "description": "Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "in": "query",
            "name": "isUploaded",
            "description": "Optional field to filter by Uploaded files",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "archiveStatus",
            "description": "Optional field that specifies comma-separated Archive Statuses to include in the list",
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursive",
            "description": "Optional field to specify if files should be returned recursively in and under the specified paths, or only directly in the specified paths",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "presignedUrlMode",
            "description": "Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior.\r\nPossible values: Attachment, Inline, Browser",
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Optionally include additional fields in the response. Multiple fields can be included by comma-separation.\r\nPossible values: TotalItemCount, PresignedUrl, InheritedAcl",
            "type": "string"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "START_DESC END_DESC",
            "type": "integer",
            "format": "int32",
            "maximum": 10000,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "START_DESC END_DESC",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tenantId",
            "description": "Optional parameter to see shared data in another tenant",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata.include",
            "description": "Optional parameter to specify comma separated patterns to include metadata by their field names.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata.exclude",
            "description": "Optional parameter to specify comma separated patterns to exclude metadata by their field names.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/FileListResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/files/list": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Get a list of volume files",
        "description": "Gets file list by volume ID and an array of file IDs. The default sort returned is alphabetical, ascending",
        "operationId": "listVolumeFiles",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VolumeFileListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/VolumeFileListResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/files/copy": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Copy list of files",
        "description": "Copies a list of files enumerated by file Ids to a destination folder",
        "operationId": "copyFiles",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileListCopyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/JobResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/files/{fileId}:completeUpload": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Complete a file Upload",
        "description": "Complete a file upload operation. If the file was uploaded using multipart uploads, combine all the multiple parts uploaded into one complete file.",
        "operationId": "completeFileUpload",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "description": "Unique identifier for the file upload to be completed.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileUploadCompleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/FileResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "File not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/files/{fileId}:archive": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Archive a file",
        "description": "Archives a file to a lower storage cost tier.",
        "operationId": "archiveFile",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "description": "Unique identifier for the file to be archived.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileArchiveRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/FileResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "File not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/files/{fileId}:unarchive": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Unarchive a file",
        "description": "Unarchive a file from a lower storage cost tier.",
        "operationId": "unarchiveFile",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "description": "Unique identifier for the file to be unarchived.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileUnarchiveRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted.",
            "schema": {
              "$ref": "#/definitions/FileResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "File not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/folders": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Get a list of folders",
        "description": "Given a volumeId or volume name, get a list of folders accessible by the JWT. The default sort returned is alphabetical, ascending. The default page size is 10 items",
        "operationId": "listFolders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "volume.id",
            "description": "Optional field that specifies comma-separated volume IDs to include in the list",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "in": "query",
            "name": "volume.name",
            "description": "Optional field that specifies comma-separated volume names to include in the list",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "in": "query",
            "name": "path",
            "description": "Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "in": "query",
            "name": "jobStatuses",
            "description": "Optional field that specifies comma-separated JobStatuses to include in the list",
            "type": "string"
          },
          {
            "in": "query",
            "name": "acls",
            "description": "Optional field that specifies comma-separated acls to include in the list",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "in": "query",
            "name": "recursive",
            "description": "Optional field to specify if folders should be returned recursively in and under the specified paths, or only directly in the specified paths",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "START_DESC END_DESC",
            "type": "integer",
            "format": "int32",
            "maximum": 10000,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "START_DESC END_DESC",
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Optionally include additional fields in the response. Multiple fields can be included by comma-separation.\r\nPossible values: TotalItemCount, InheritedAcl",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tenantId",
            "description": "Optional parameter to see shared data in another tenant",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata.include",
            "description": "Optional parameter to specify comma separated patterns to include metadata by their field names.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata.exclude",
            "description": "Optional parameter to specify comma separated patterns to exclude metadata by their field names.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/FolderListResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Create a folder in GDS and receive credentials for upload",
        "description": "Create a folder entry in GDS. Returns temporary credentials for folder upload directly to S3 when the include=objectStoreAccess parameter is used. Volume ID or volume name is required for folder creation. If a folder path is provided and does not exist, GDS automatically creates the folder path in the appropriate account.",
        "operationId": "createFolder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "include",
            "description": "Optionally include additional fields in the response.\r\n            Possible values: ObjectStoreAccess",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateFolderRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created new Folder.",
            "schema": {
              "$ref": "#/definitions/FolderWriteableResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "A conflict was found. Make sure the new Folder doesn't already exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Folders"
        ],
        "summary": "Updates list of folders with metadata",
        "description": "Updates list of folders with metadata",
        "operationId": "bulkFolderUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/BulkFolderUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BulkFolderUpdateResponse"
            }
          },
          "202": {
            "description": "Accepted.",
            "schema": {
              "$ref": "#/definitions/BulkFolderUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/folders/{folderId}": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Get information about a folder in GDS.",
        "description": "Get information for the specified folder ID.",
        "operationId": "getFolder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "folderId",
            "description": "Unique identifier for the folder to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "tenantId",
            "description": "Optional parameter to see shared data in another tenant",
            "type": "string"
          },
          {
            "in": "query",
            "name": "includeVolumeMetadata",
            "description": "Optional parameter to return volume's metadata",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "includeActiveJobs",
            "description": "Optional parameter to return active jobs associated to folder",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "metadata.include",
            "description": "Optional parameter to specify comma separated patterns to include metadata by their field names.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata.exclude",
            "description": "Optional parameter to specify comma separated patterns to exclude metadata by their field names.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Optionally include additional fields in the response.\r\n            Possible values: ObjectStoreAccess",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/FolderResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Folder not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Folders"
        ],
        "summary": "Update a folder content or acl",
        "description": "Update an existing folder in GDS and return upload credentials for that folder. Changes to the folder name and other metadata are not supported at this time.  Optionally overwrite the acl for this folder if acl is provided in the request.",
        "operationId": "updateFolder",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "folderId",
            "description": "Unique identifier for the folder to be updated.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Optionally include additional fields in the response.\r\n            Possible values: ObjectStoreAccess",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/FolderUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/FolderWriteableResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Folder not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Folders"
        ],
        "summary": "Deletes a folder by id",
        "operationId": "deleteFolder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "folderId",
            "description": "Unique identifier for the folder to be deleted.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted.",
            "schema": {
              "$ref": "#/definitions/FolderResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Folder not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/folders/{folderId}:copy": {
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Copy a folder",
        "description": "Copy a folder into a target parent folder",
        "operationId": "copyFolder",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "folderId",
            "description": "Unique identifier for the folder to be copied.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "tenantId",
            "description": "Optional parameter to copy from a shared folder in another tenant",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FolderCopyRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted.",
            "schema": {
              "$ref": "#/definitions/JobResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Folder not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator."
          }
        }
      }
    },
    "/v1/folders/{folderId}:archive": {
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Archive a folder",
        "description": "Archives a folder to a lower storage cost tier.",
        "operationId": "archiveFolder",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "folderId",
            "description": "Unique identifier for the folder to be archived.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FolderArchiveRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted.",
            "schema": {
              "$ref": "#/definitions/FolderResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Folder not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator."
          }
        }
      }
    },
    "/v1/folders/{folderId}:unarchive": {
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Unarchive a folder",
        "description": "Unarchive a folder from a lower storage cost tier.",
        "operationId": "unarchiveFolder",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "folderId",
            "description": "Unique identifier for the folder to be unarchived.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FolderUnarchiveRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted.",
            "schema": {
              "$ref": "#/definitions/FolderResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Folder not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator."
          }
        }
      }
    },
    "/v1/folders/{folderId}/sessions/{sessionId}": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Get status of a folder upload in GDS",
        "description": "Get status of a folder upload in GDS.",
        "operationId": "getFolderSession",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "folderId",
            "description": "Unique identifier for the folder related to the upload session.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sessionId",
            "description": "The id of the upload session",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Completed upload session.",
            "schema": {
              "$ref": "#/definitions/SessionResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad request."
          }
        }
      }
    },
    "/v1/folders/{folderId}/sessions/{sessionId}:complete": {
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Complete a folder upload in GDS",
        "description": "Complete a folder upload in GDS.",
        "operationId": "completeFolderSession",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "folderId",
            "description": "Unique identifier for the folder related to the upload session.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sessionId",
            "description": "The id of the upload session",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteSessionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Completed upload session.",
            "schema": {
              "$ref": "#/definitions/SessionResponse"
            }
          },
          "202": {
            "description": "Upload session in progress.",
            "schema": {
              "$ref": "#/definitions/SessionResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/folders/{folderId}/sessions": {
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Create a session",
        "description": "Create a session and credentials used for accessing the object store directly",
        "operationId": "createFolderSession",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "folderId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSessionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateSessionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/folders/bulkMetadataFolderUpdate": {
      "patch": {
        "tags": [
          "Folders"
        ],
        "summary": "Updates list of folders with metadata",
        "description": "Updates list of folders with metadata",
        "operationId": "bulkMetadataFolderUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/BulkFolderMetadataUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/JobResponse"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/JobResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/folders/{folderId}/jobs/{jobId}": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Get status of a folder job in GDS",
        "description": "Get status of a folder job in GDS.",
        "operationId": "getFolderJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "folderId",
            "description": "Unique identifier for the folder related to the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "description": "The id of the job",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned job.",
            "schema": {
              "$ref": "#/definitions/JobResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad request."
          }
        }
      }
    },
    "/v1/jobs/{jobId}": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get information about a job in GDS.",
        "description": "Get information for the specified job ID.",
        "operationId": "getJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Unique identifier for the job to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "tenantId",
            "description": "Optional parameter to see shared data in another tenant",
            "type": "string"
          },
          {
            "in": "query",
            "name": "includeErrors",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/JobResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Job not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/jobs": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get a list of jobs for a given folder",
        "description": "Given a folder id, get a list of jobs accessible by the JWT. The default sort returned is by job progress status. The default page size is 10 items",
        "operationId": "listJobs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "jobStatuses",
            "description": "Optional field that specifies comma-separated JobStatuses to include in the list",
            "type": "string"
          },
          {
            "in": "query",
            "name": "folderId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "START_DESC END_DESC",
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "START_DESC END_DESC",
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Optionally include additional fields in the response. Multiple fields can be included by comma-separation.\r\nPossible values: TotalItemCount, InheritedAcl",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/JobListResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/jobs/{jobId}:abort": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Abort a job in GDS.",
        "description": "Abort the specified job ID.",
        "operationId": "abortJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Unique identifier for the job to be aborted.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted.",
            "schema": {
              "$ref": "#/definitions/JobResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Job not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator."
          }
        }
      }
    },
    "/v1/volumeconfigurations": {
      "get": {
        "tags": [
          "VolumeConfigurations"
        ],
        "summary": "Get a list of volumes",
        "operationId": "listVolumeConfigurations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "onlineStatus",
            "description": "Optional field that specifies the Online Status for Volume configurations included in the list.\r\nIf provided, the value must be Initializing, Ok, or Error.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "START_DESC END_DESC",
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "START_DESC END_DESC",
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Optionally include additional fields in the response. Multiple fields can be included by comma-separation.\r\nPossible values: TotalItemCount, InheritedAcl",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/VolumeConfigurationListResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "VolumeConfigurations"
        ],
        "summary": "Create a volume configuration in GDS.",
        "description": "Create a volume configuration in GDS. This contains the object store details that will be used to create volumes.",
        "operationId": "createVolumeConfiguration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateVolumeConfigurationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created new Volume Configuration.",
            "schema": {
              "$ref": "#/definitions/VolumeConfigurationResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "A conflict was found. Make sure the new Volume configuration name doesn't already exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/volumeconfigurations/{volumeConfigurationName}": {
      "get": {
        "tags": [
          "VolumeConfigurations"
        ],
        "summary": "Get information for the specified volume configuration name or Id",
        "operationId": "getVolumeConfiguration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "volumeConfigurationName",
            "description": "Unique name of the volume configuration to retrieve information for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/VolumeConfigurationResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Volume configuration not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VolumeConfigurations"
        ],
        "summary": "Deletes a volume configuration by Id or name",
        "operationId": "deleteVolumeConfiguration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "volumeConfigurationName",
            "description": "Unique name of the Volume Configuration to be deleted.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted.",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Volume not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/volumeconfigurations/{volumeConfigurationName}:validate": {
      "post": {
        "tags": [
          "VolumeConfigurations"
        ],
        "summary": "Validate a volume configuration",
        "description": "Validate an existing volume configuration.",
        "operationId": "validateVolumeConfiguration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "volumeConfigurationName",
            "description": "Unique name of the volume configuration to be validated.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted.",
            "schema": {
              "$ref": "#/definitions/VolumeConfigurationResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Volume configuration not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/volumes": {
      "get": {
        "tags": [
          "Volumes"
        ],
        "summary": "Get a list of volumes",
        "description": "Get a list of volumes accessible by the current JWT token’s tenant ID in GDS. The default sort returned is alphabetical, ascending. The default page size is 10 items.",
        "operationId": "listVolumes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "pageSize",
            "description": "START_DESC END_DESC",
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "START_DESC END_DESC",
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Optionally include additional fields in the response. Multiple fields can be included by comma-separation.\r\nPossible values: TotalItemCount, InheritedAcl",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tenantId",
            "description": "Optional parameter to see shared data in another tenant",
            "type": "string"
          },
          {
            "in": "query",
            "name": "volumeConfigurationName",
            "description": "Unique name of the volume configuration",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/VolumeListResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Volumes"
        ],
        "summary": "Create a volume in GDS and receive temporary credentials for upload",
        "description": "Create a volume in GDS to hold folders and files. Returns upload credentials to the root folder of the volume when the include=objectStoreAccess parameter is used. You must create a volume prior to uploading files or folders.",
        "operationId": "createVolume",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "include",
            "description": "Optionally include additional fields in the response.\r\n            Possible values: ObjectStoreAccess",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateVolumeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created new Volume.",
            "schema": {
              "$ref": "#/definitions/CreateVolumeResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "A conflict was found. Make sure the new Volume doesn't already exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/volumes/{volumeId}": {
      "get": {
        "tags": [
          "Volumes"
        ],
        "summary": "Get information for the specified volume ID or volume name",
        "operationId": "getVolume",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "volumeId",
            "description": "Unique identifier for the volume to retrieve information for.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "tenantId",
            "description": "Optional parameter to see shared data in another tenant",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata.include",
            "description": "Optional parameter to specify comma separated patterns to include metadata by their field names.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata.exclude",
            "description": "Optional parameter to specify comma separated patterns to exclude metadata by their field names.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Volume not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Volumes"
        ],
        "summary": "Update a volume content",
        "description": "Update an existing volume in GDS and return upload credentials for that volume. ",
        "operationId": "updateVolume",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "volumeId",
            "description": "Unique identifier for the volume to be updated.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Optionally include additional fields in the response.\r\n            Possible values: ObjectStoreAccess",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/UpdateVolumeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Volume not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Volumes"
        ],
        "summary": "Deletes a volume by Id",
        "operationId": "deleteVolume",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "volumeId",
            "description": "Unique identifier for the Volume to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "purgeObjectStoreData",
            "description": "Optional and for BYOB only. If true, the volume's data in object storage will be erased.\r\n            This field is ignored for non-BYOB volumes where the object store data is always removed upon deleting the volume.",
            "type": "boolean"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted.",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Volume not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get a list of subscriptions.",
        "description": "Get a list of subscriptions accessible by the current JWT token’s tenant Id.",
        "operationId": "listSubscriptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "eventType",
            "description": "Optional event type for filtering returned subscriptions",
            "type": "string",
            "maxLength": 255
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Optional parameter to define the page size returned. Valid inputs range from 1-1000.",
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 1
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Utilized for navigation after initial listing. Valid values include those of\r\nfirstPageToken, nextPageToken, and previousPageToken in the list response.\r\nWhen there are no more pages, the nextPageToken will be null.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriptions found and returned successfully.",
            "schema": {
              "$ref": "#/definitions/SubscriptionList"
            }
          },
          "400": {
            "description": "An invalid or missing input parameter will result in a bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "The acting identity cannot be authenticated and authorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The acting identity is not authorized to access subscriptions.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Creates a subscription to an event type and defines how those events get delivered.",
        "description": "Events can be delivered to AWS SQS, AWS SNS, or can be used to launch a WES workflow.",
        "operationId": "createSubscription",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateSubscriptionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The subscription is created successfully.",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "400": {
            "description": "An invalid or missing input parameter will result in a bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "The acting identity cannot be authenticated and authorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "The given delivery target is not valid or cannot be delivered to.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/subscriptions/{subscriptionId}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Given a subscription id, returns information about that subscription.",
        "description": "Given a subscription id, returns information about that subscription accessible by the current JWT token’s tenant Id.",
        "operationId": "getSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "Id of the subscription to return",
            "required": true,
            "type": "string",
            "maxLength": 255
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription for the given ID is found and returned successfully.",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "400": {
            "description": "An invalid or missing input parameter will result in a bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "The acting identity cannot be authenticated and authorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The acting identity is not authorized to access the subscription for the given ID.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Could not find a subscription for the given ID.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "410": {
            "description": "The subscription for the given ID has been disabled.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Given a subscription id, disables the specified subscription.",
        "description": "Given a subscription id, disables that subscription with the current JWT token’s tenant Id.",
        "operationId": "disableSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "Id of the subscription to be disabled",
            "required": true,
            "type": "string",
            "maxLength": 255
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription for the given ID is disabled successfully.",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "400": {
            "description": "An invalid or missing input parameter will result in a bad request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "The acting identity cannot be authenticated and authorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The acting identity is not authorized to disable the subscription for the given ID.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Could not find a subscription for the given ID.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "410": {
            "description": "The subscription for the given ID has been disabled.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AbortWorkflowRunRequest": {
      "description": "Abort a workflow run",
      "required": [
        "error"
      ],
      "type": "object",
      "properties": {
        "error": {
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "cause": {
          "maxLength": 32768,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "CreateWorkflowRequest": {
      "description": "Create a workflow and optional version",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "minLength": 1,
          "type": "string"
        },
        "description": {
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "organization": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "workflowVersion": {
          "$ref": "#/definitions/CreateWorkflowVersionRequest"
        },
        "toolClass": {
          "enum": [
            "workflow",
            "commandLineTool"
          ],
          "type": "string"
        },
        "acl": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateWorkflowVersionRequest": {
      "description": "Create a new workflow version under an existing workflow root",
      "required": [
        "version"
      ],
      "type": "object",
      "properties": {
        "version": {
          "minLength": 1,
          "type": "string"
        },
        "description": {
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "language": {
          "$ref": "#/definitions/WorkflowLanguage"
        },
        "definition": {},
        "acl": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "description": "Published Status of the workflow version",
          "enum": [
            "draft",
            "released",
            "obsolete"
          ],
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {}
        }
      }
    },
    "FailWorkflowSignalRequest": {
      "description": "Fail workflow signal request",
      "required": [
        "error"
      ],
      "type": "object",
      "properties": {
        "error": {
          "description": "Externally provided Error of a signalling action.",
          "minLength": 1,
          "type": "string"
        },
        "cause": {
          "description": "Externally provided Cause of a failed signalling action.",
          "type": "string"
        }
      }
    },
    "LaunchWorkflowVersionRequest": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the workflow run",
          "maxLength": 255,
          "minLength": 0,
          "pattern": "^(?![wW][fF][rR]\\..*)(^[0-9a-zA-Z-_\\.]*$)",
          "type": "string"
        },
        "input": {
          "description": "Input for the launched workflow run. Must resolve to a JSON object."
        },
        "engineParameters": {
          "description": "Runtime options for launching workflows (currently only used for Airflow     and otherwise ignored). Must resolve to a JSON object."
        }
      }
    },
    "SucceedWorkflowSignalRequest": {
      "type": "object",
      "properties": {
        "result": {
          "description": "External result of a successful signal. Must resolve to a JSON value."
        }
      }
    },
    "UpdateWorkflowRequest": {
      "description": "Update an existing workflow",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "organization": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "acl": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateWorkflowVersionRequest": {
      "description": "Update a workflow version definition using patch semantics",
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "description": {
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "language": {
          "$ref": "#/definitions/WorkflowLanguage"
        },
        "definition": {},
        "acl": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "description": "New Status for workflow version",
          "enum": [
            "draft",
            "released",
            "obsolete"
          ],
          "type": "string"
        }
      }
    },
    "Workflow": {
      "description": "Details of a workflow",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique resource ID",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "href": {
          "format": "uri",
          "description": "HREF to the resource",
          "type": "string"
        },
        "name": {
          "description": "Name of the workflow",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "organization": {
          "description": "Organization associated with the workflow",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Description of the workflow",
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "toolClass": {
          "description": "Workflow type",
          "type": "string"
        },
        "categories": {
          "description": "Categories of the workflow (Limit Max Size : 10)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdByClientId": {
          "description": "Client ID of the Origin Request",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Time (in UTC) the resource was created",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Time (in UTC) the resource was modified",
          "type": "string"
        },
        "createdBy": {
          "description": "User that created the resource",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User that modified the resource",
          "type": "string"
        },
        "tenantId": {
          "description": "Tenant ID the resource belongs to",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "acl": {
          "description": "Access control list of the resource",
          "maxLength": 128,
          "minLength": 0,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WorkflowArgument": {
      "description": "Argument definition",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the argument key",
          "maxLength": 128,
          "minLength": 0,
          "type": "string"
        },
        "value": {
          "description": "A simple string value for the argument. Cannot provide both Value and Json at the same time.",
          "type": "string"
        },
        "json": {
          "description": "A JSON value for the argument. Cannot provide both Value and Json at the same time."
        },
        "options": {
          "description": "Comma separated list of options for the argument: Required, Overridable, Writable, Json, Optional, ReadOnly, Final\r\nSome combinations of options are considered errors, like Required/Optional, Overridable/Final, Writable/ReadOnly, etc.",
          "type": "string"
        }
      }
    },
    "WorkflowCompact": {
      "description": "Compact details of a workflow",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique resource ID",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "href": {
          "format": "uri",
          "description": "HREF to the resource",
          "type": "string"
        },
        "name": {
          "description": "Name of the workflow",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "organization": {
          "description": "Organization associated with the workflow",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Description of the workflow",
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "toolClass": {
          "description": "Workflow type",
          "type": "string"
        },
        "categories": {
          "description": "Categories of the workflow (Limit Max Size : 10)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdByClientId": {
          "description": "Client ID of the Origin Request",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Time (in UTC) the resource was created",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Time (in UTC) the resource was modified",
          "type": "string"
        },
        "createdBy": {
          "description": "User that created the resource",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User that modified the resource",
          "type": "string"
        },
        "tenantId": {
          "description": "Tenant ID the resource belongs to",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "acl": {
          "description": "Access control list of the resource",
          "maxLength": 128,
          "minLength": 0,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WorkflowConnection": {
      "description": "Defines a connection that can be used in a workflow definition to perform actions",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 128,
          "minLength": 0,
          "type": "string"
        },
        "type": {
          "description": "Type of the connection: PlatformJwt, ApiBearerToken, AwsCredentials, ApiCustomAuthentication, BsshOAuthV2",
          "type": "string"
        },
        "host": {
          "format": "uri",
          "description": "For API based connections, the Host part of the API endpoint",
          "maxLength": 1024,
          "minLength": 0,
          "type": "string",
          "example": "https://api.myhost.com/v1/"
        },
        "hostValidationRegex": {
          "description": "Regex that hosts associated with this connection must meet (when host override by each run is allowed)",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "credentials": {
          "description": "Credentials associated with the connection. Format depends on type of connection.",
          "type": "string"
        },
        "options": {
          "description": "Comma separated list of options associated with the connection: CredentialsRequired, AllowCredentialsOverride, AutoDisableCredentialsAfterUse, AllowHostOverride",
          "type": "string"
        },
        "autoDisableUrl": {
          "format": "uri",
          "description": "Relative URL (relative to Host) to call in order to disable the credentials",
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "autoDisableHttpMethod": {
          "description": "Http method to use to disable the credentials. Must be POST, PUT or DELETE",
          "maxLength": 10,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "WorkflowLanguage": {
      "description": "Language details about a workflow version",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the workflow language",
          "minLength": 1,
          "type": "string"
        },
        "version": {
          "description": "The version of the workflow language, if any",
          "type": "string"
        }
      }
    },
    "WorkflowList": {
      "type": "object",
      "properties": {
        "items": {
          "description": "Items in paged list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowCompact"
          }
        },
        "itemCount": {
          "format": "int32",
          "description": "Number of items included in the page",
          "type": "integer"
        },
        "firstPageToken": {
          "description": "PageToken for first paged list",
          "type": "string"
        },
        "nextPageToken": {
          "description": "PageToken for the next paged list",
          "type": "string"
        },
        "prevPageToken": {
          "description": "PageToken for the previous paged list",
          "type": "string"
        },
        "lastPageToken": {
          "description": "PageToken for the last paged list. Only included when totalItemCount is listed",
          "type": "string"
        },
        "totalItemCount": {
          "format": "int64",
          "description": "Total number of items in all pages. Only included when requested",
          "type": "integer"
        },
        "totalPageCount": {
          "format": "int64",
          "description": "Total number of pages. Only included when totalItemCount is listed",
          "type": "integer"
        }
      }
    },
    "WorkflowRun": {
      "description": "Details of a workflow run",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique resource ID",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "href": {
          "format": "uri",
          "description": "HREF to the resource",
          "type": "string"
        },
        "name": {
          "description": "Name of the workflow run",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "timeStarted": {
          "format": "date-time",
          "description": "The time (in UTC) the workflow run started",
          "type": "string"
        },
        "timeStopped": {
          "format": "date-time",
          "description": "The time (in UTC) the Workflow Run stopped",
          "type": "string"
        },
        "status": {
          "description": "Workflow run status",
          "type": "string"
        },
        "idempotencyKey": {
          "type": "string"
        },
        "statusSummary": {
          "description": "Workflow run status summary",
          "type": "string"
        },
        "error": {
          "description": "Error for a failed workflow run",
          "type": "string"
        },
        "errorCause": {
          "description": "Error cause for a failed workflow run",
          "type": "string"
        },
        "workflowVersion": {
          "$ref": "#/definitions/WorkflowVersionCompact"
        },
        "createdByClientId": {
          "description": "Client ID of the Origin Request",
          "type": "string"
        },
        "input": {
          "description": "Input to workflow run, as JSON"
        },
        "output": {
          "description": "Output from workflow run, as JSON"
        },
        "definition": {
          "description": "Definition of the workflow version",
          "type": "string"
        },
        "engineParameters": {
          "description": "Workflow Engine Parameters",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Time (in UTC) the resource was created",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Time (in UTC) the resource was modified",
          "type": "string"
        },
        "createdBy": {
          "description": "User that created the resource",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User that modified the resource",
          "type": "string"
        },
        "tenantId": {
          "description": "Tenant ID the resource belongs to",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "acl": {
          "description": "Access control list of the resource",
          "maxLength": 128,
          "minLength": 0,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WorkflowRunCompact": {
      "description": "Compact details of a workflow run",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique resource ID",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "href": {
          "format": "uri",
          "description": "HREF to the resource",
          "type": "string"
        },
        "name": {
          "description": "Name of the workflow run",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "timeStarted": {
          "format": "date-time",
          "description": "The time (in UTC) the workflow run started",
          "type": "string"
        },
        "timeStopped": {
          "format": "date-time",
          "description": "The time (in UTC) the Workflow Run stopped",
          "type": "string"
        },
        "status": {
          "description": "Workflow run status",
          "type": "string"
        },
        "idempotencyKey": {
          "type": "string"
        },
        "statusSummary": {
          "description": "Workflow run status summary",
          "type": "string"
        },
        "error": {
          "description": "Error for a failed workflow run",
          "type": "string"
        },
        "errorCause": {
          "description": "Error cause for a failed workflow run",
          "type": "string"
        },
        "workflowVersion": {
          "$ref": "#/definitions/WorkflowVersionCompact"
        },
        "createdByClientId": {
          "description": "Client ID of the Origin Request",
          "type": "string"
        },
        "engineParameters": {
          "description": "Workflow Engine Parameters",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Time (in UTC) the resource was created",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Time (in UTC) the resource was modified",
          "type": "string"
        },
        "createdBy": {
          "description": "User that created the resource",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User that modified the resource",
          "type": "string"
        },
        "tenantId": {
          "description": "Tenant ID the resource belongs to",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "acl": {
          "description": "Access control list of the resource",
          "maxLength": 128,
          "minLength": 0,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WorkflowRunHistoryEvent": {
      "description": "Information about a specific event in the workflow run history",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the event, such as the name of the step/task for state-level events and run name for run-level events",
          "type": "string"
        },
        "eventId": {
          "format": "int64",
          "description": "Identifier for the history event, if any",
          "type": "integer"
        },
        "previousEventId": {
          "format": "int64",
          "description": "Identifier for any previous history event (if available)",
          "type": "integer"
        },
        "eventType": {
          "description": "Type of history event. The associated details entry will be populated based on the type of event.",
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Timestamp for the history event",
          "type": "string"
        },
        "eventDetails": {
          "description": "Details for history event"
        }
      }
    },
    "WorkflowRunHistoryEventList": {
      "type": "object",
      "properties": {
        "items": {
          "description": "Items in paged list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowRunHistoryEvent"
          }
        },
        "itemCount": {
          "format": "int32",
          "description": "Number of items included in the page",
          "type": "integer"
        },
        "firstPageToken": {
          "description": "PageToken for first paged list",
          "type": "string"
        },
        "nextPageToken": {
          "description": "PageToken for the next paged list",
          "type": "string"
        },
        "prevPageToken": {
          "description": "PageToken for the previous paged list",
          "type": "string"
        },
        "lastPageToken": {
          "description": "PageToken for the last paged list. Only included when totalItemCount is listed",
          "type": "string"
        },
        "totalItemCount": {
          "format": "int64",
          "description": "Total number of items in all pages. Only included when requested",
          "type": "integer"
        },
        "totalPageCount": {
          "format": "int64",
          "description": "Total number of pages. Only included when totalItemCount is listed",
          "type": "integer"
        }
      }
    },
    "WorkflowRunList": {
      "type": "object",
      "properties": {
        "items": {
          "description": "Items in paged list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowRunCompact"
          }
        },
        "itemCount": {
          "format": "int32",
          "description": "Number of items included in the page",
          "type": "integer"
        },
        "firstPageToken": {
          "description": "PageToken for first paged list",
          "type": "string"
        },
        "nextPageToken": {
          "description": "PageToken for the next paged list",
          "type": "string"
        },
        "prevPageToken": {
          "description": "PageToken for the previous paged list",
          "type": "string"
        },
        "lastPageToken": {
          "description": "PageToken for the last paged list. Only included when totalItemCount is listed",
          "type": "string"
        },
        "totalItemCount": {
          "format": "int64",
          "description": "Total number of items in all pages. Only included when requested",
          "type": "integer"
        },
        "totalPageCount": {
          "format": "int64",
          "description": "Total number of pages. Only included when totalItemCount is listed",
          "type": "integer"
        }
      }
    },
    "WorkflowSignal": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique resource ID",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "href": {
          "format": "uri",
          "description": "HREF to the resource",
          "type": "string"
        },
        "sendHeartbeatHref": {
          "format": "uri",
          "description": "HREF to send a heartbeat to a workflow signal",
          "type": "string"
        },
        "sendSuccessResponseHref": {
          "format": "uri",
          "description": "HREF to succeed a workflow signal",
          "type": "string"
        },
        "sendFailureResponseHref": {
          "format": "uri",
          "description": "HREF to fail a workflow signal",
          "type": "string"
        },
        "name": {
          "description": "Unique name of the signal",
          "type": "string"
        },
        "status": {
          "description": "Current status of the signal",
          "type": "string"
        },
        "type": {
          "description": "User-defined type associated with the signal",
          "type": "string"
        },
        "description": {
          "description": "Description of the signal",
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "inputs": {
          "description": "Inputs defined by the originating WaitForSignal state, in JSON."
        },
        "workflowRun": {
          "$ref": "#/definitions/WorkflowRunCompact"
        },
        "timeoutSeconds": {
          "format": "int32",
          "description": "Signal timeout in seconds. The Signal will timeout if a heartbeat, succeed or fail is not received in this time interval.",
          "type": "integer"
        },
        "result": {
          "description": "The result of a successful signalling action in JSON."
        },
        "error": {
          "description": "The error of a failed signal.",
          "type": "string"
        },
        "errorCause": {
          "description": "The error cause of a failed signal.",
          "type": "string"
        },
        "createdByClientId": {
          "description": "Client ID of the Origin Request",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Time (in UTC) the resource was created",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Time (in UTC) the resource was modified",
          "type": "string"
        },
        "createdBy": {
          "description": "User that created the resource",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User that modified the resource",
          "type": "string"
        },
        "tenantId": {
          "description": "Tenant ID the resource belongs to",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "acl": {
          "description": "Access control list of the resource",
          "maxLength": 128,
          "minLength": 0,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WorkflowSignalCompact": {
      "description": "Compact details of a signal",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique resource ID",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "href": {
          "format": "uri",
          "description": "HREF to the resource",
          "type": "string"
        },
        "sendHeartbeatHref": {
          "format": "uri",
          "description": "HREF to send a heartbeat to a workflow signal",
          "type": "string"
        },
        "sendSuccessResponseHref": {
          "format": "uri",
          "description": "HREF to succeed a workflow signal",
          "type": "string"
        },
        "sendFailureResponseHref": {
          "format": "uri",
          "description": "HREF to fail a workflow signal",
          "type": "string"
        },
        "name": {
          "description": "Unique name of the signal",
          "type": "string"
        },
        "status": {
          "description": "Current status of the signal",
          "type": "string"
        },
        "type": {
          "description": "User-defined type associated with the signal",
          "type": "string"
        },
        "description": {
          "description": "Description of the signal",
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "inputs": {
          "description": "Inputs defined by the originating WaitForSignal state, in JSON."
        },
        "workflowRun": {
          "$ref": "#/definitions/WorkflowRunCompact"
        },
        "timeoutSeconds": {
          "format": "int32",
          "description": "Signal timeout in seconds. The Signal will timeout if a heartbeat, succeed or fail is not received in this time interval.",
          "type": "integer"
        },
        "result": {
          "description": "The result of a successful signalling action in JSON."
        },
        "error": {
          "description": "The error of a failed signal.",
          "type": "string"
        },
        "errorCause": {
          "description": "The error cause of a failed signal.",
          "type": "string"
        },
        "createdByClientId": {
          "description": "Client ID of the Origin Request",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Time (in UTC) the resource was created",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Time (in UTC) the resource was modified",
          "type": "string"
        },
        "createdBy": {
          "description": "User that created the resource",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User that modified the resource",
          "type": "string"
        },
        "tenantId": {
          "description": "Tenant ID the resource belongs to",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "acl": {
          "description": "Access control list of the resource",
          "maxLength": 128,
          "minLength": 0,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WorkflowSignalList": {
      "type": "object",
      "properties": {
        "items": {
          "description": "Items in paged list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowSignalCompact"
          }
        },
        "itemCount": {
          "format": "int32",
          "description": "Number of items included in the page",
          "type": "integer"
        },
        "firstPageToken": {
          "description": "PageToken for first paged list",
          "type": "string"
        },
        "nextPageToken": {
          "description": "PageToken for the next paged list",
          "type": "string"
        },
        "prevPageToken": {
          "description": "PageToken for the previous paged list",
          "type": "string"
        },
        "lastPageToken": {
          "description": "PageToken for the last paged list. Only included when totalItemCount is listed",
          "type": "string"
        },
        "totalItemCount": {
          "format": "int64",
          "description": "Total number of items in all pages. Only included when requested",
          "type": "integer"
        },
        "totalPageCount": {
          "format": "int64",
          "description": "Total number of pages. Only included when totalItemCount is listed",
          "type": "integer"
        }
      }
    },
    "WorkflowVersion": {
      "description": "Details of a Workflow version definition",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique resource ID",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "href": {
          "format": "uri",
          "description": "HREF to the resource",
          "type": "string"
        },
        "version": {
          "description": "Name of the workflow version",
          "maxLength": 40,
          "minLength": 0,
          "type": "string"
        },
        "category": {
          "description": "Category of the workflow version",
          "maxLength": 128,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Description of the workflow version",
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "language": {
          "$ref": "#/definitions/WorkflowLanguage"
        },
        "status": {
          "description": "Published Status of the workflow version",
          "type": "string"
        },
        "createdByClientId": {
          "description": "Client ID of the Origin Request",
          "type": "string"
        },
        "definition": {
          "description": "Definition of the workflow version",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Time (in UTC) the resource was created",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Time (in UTC) the resource was modified",
          "type": "string"
        },
        "createdBy": {
          "description": "User that created the resource",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User that modified the resource",
          "type": "string"
        },
        "tenantId": {
          "description": "Tenant ID the resource belongs to",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "acl": {
          "description": "Access control list of the resource",
          "maxLength": 128,
          "minLength": 0,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WorkflowVersionCompact": {
      "description": "Compact details of a Workflow version definition",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique resource ID",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "href": {
          "format": "uri",
          "description": "HREF to the resource",
          "type": "string"
        },
        "version": {
          "description": "Name of the workflow version",
          "maxLength": 40,
          "minLength": 0,
          "type": "string"
        },
        "category": {
          "description": "Category of the workflow version",
          "maxLength": 128,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Description of the workflow version",
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "language": {
          "$ref": "#/definitions/WorkflowLanguage"
        },
        "status": {
          "description": "Published Status of the workflow version",
          "type": "string"
        },
        "createdByClientId": {
          "description": "Client ID of the Origin Request",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Time (in UTC) the resource was created",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Time (in UTC) the resource was modified",
          "type": "string"
        },
        "createdBy": {
          "description": "User that created the resource",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User that modified the resource",
          "type": "string"
        },
        "tenantId": {
          "description": "Tenant ID the resource belongs to",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "acl": {
          "description": "Access control list of the resource",
          "maxLength": 128,
          "minLength": 0,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WorkflowVersionList": {
      "type": "object",
      "properties": {
        "items": {
          "description": "Items in paged list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowVersionCompact"
          }
        },
        "itemCount": {
          "format": "int32",
          "description": "Number of items included in the page",
          "type": "integer"
        },
        "firstPageToken": {
          "description": "PageToken for first paged list",
          "type": "string"
        },
        "nextPageToken": {
          "description": "PageToken for the next paged list",
          "type": "string"
        },
        "prevPageToken": {
          "description": "PageToken for the previous paged list",
          "type": "string"
        },
        "lastPageToken": {
          "description": "PageToken for the last paged list. Only included when totalItemCount is listed",
          "type": "string"
        },
        "totalItemCount": {
          "format": "int64",
          "description": "Total number of items in all pages. Only included when requested",
          "type": "integer"
        },
        "totalPageCount": {
          "format": "int64",
          "description": "Total number of pages. Only included when totalItemCount is listed",
          "type": "integer"
        }
      }
    },
    "Credentials": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Image": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of url for Docker Image",
          "type": "string"
        },
        "tag": {
          "description": "Version of image as defined in repository",
          "type": "string"
        },
        "digest": {
          "description": "Version of image as defined in repository",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/Credentials"
        }
      }
    },
    "InputMountMappingWithCreds": {
      "type": "object",
      "properties": {
        "storageProvider": {
          "type": "string"
        },
        "credentials": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "path": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "urn": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        },
        "type": {
          "default": "File",
          "type": "string"
        }
      }
    },
    "MountMappingWithCreds": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "urn": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "storageProvider": {
          "type": "string"
        },
        "credentials": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "serviceUrl": {
          "type": "string"
        }
      }
    },
    "SystemFiles": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "urn": {
          "type": "string"
        },
        "storageProvider": {
          "type": "string"
        },
        "credentials": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Resources": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "size": {
          "type": "string"
        },
        "cpuCores": {
          "format": "double",
          "type": "number"
        },
        "memoryGb": {
          "format": "double",
          "type": "number"
        },
        "hardware": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tier": {
          "type": "string"
        }
      }
    },
    "InputStreamSettings": {
      "type": "object",
      "properties": {
        "accessPattern": {
          "default": "sequential",
          "type": "string"
        },
        "cacheSizeGB": {
          "format": "int32",
          "default": 50,
          "maximum": 10000,
          "minimum": 50,
          "type": "integer"
        },
        "blockSizeMB": {
          "format": "double",
          "default": 32,
          "maximum": 1024,
          "minimum": 0,
          "type": "number"
        },
        "prefetchBlocks": {
          "format": "int32",
          "default": 32,
          "maximum": 64,
          "minimum": 0,
          "type": "integer"
        }
      }
    },
    "Environment": {
      "type": "object",
      "properties": {
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "resources": {
          "$ref": "#/definitions/Resources"
        },
        "inputStreamSettings": {
          "$ref": "#/definitions/InputStreamSettings"
        }
      }
    },
    "Execution": {
      "type": "object",
      "properties": {
        "image": {
          "$ref": "#/definitions/Image"
        },
        "command": {
          "type": "string"
        },
        "args": {
          "description": "Argument to run specified task",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inputs": {
          "description": "Path (Inputs) - Path to mount file at valid Url\r\nURL (Inputs) - Url of file mounted at specified path",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputMountMappingWithCreds"
          }
        },
        "outputs": {
          "description": "Path (Outputs) - Path where files will be output to valid Url\r\nURL (Outputs) - Url of folder with files from the path will be uploaded",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MountMappingWithCreds"
          }
        },
        "systemFiles": {
          "$ref": "#/definitions/SystemFiles"
        },
        "environment": {
          "$ref": "#/definitions/Environment"
        },
        "workingDirectory": {
          "type": "string"
        },
        "retryLimit": {
          "format": "int32",
          "default": 3,
          "type": "integer"
        },
        "retryCount": {
          "format": "int32",
          "default": 0,
          "type": "integer"
        }
      }
    },
    "TaskVersionSummary": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Global identifier for object",
          "type": "string"
        },
        "href": {
          "description": "Href of the object",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "version": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "maxLength": 4096,
          "minLength": 0,
          "type": "string"
        },
        "acl": {
          "description": "Access Control List",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tenantId": {
          "type": "string"
        },
        "subTenantId": {
          "type": "string"
        },
        "createdBy": {
          "description": "User who created the object",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was created in TES",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User who updated the object",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was modified in TES",
          "type": "string"
        }
      }
    },
    "TaskRunLogs": {
      "type": "object",
      "properties": {
        "startTime": {
          "format": "date-time",
          "type": "string"
        },
        "endTime": {
          "format": "date-time",
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "errorDetails": {
          "type": "string"
        },
        "stdout": {
          "type": "string"
        },
        "stderr": {
          "type": "string"
        }
      }
    },
    "TaskRun": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Global identifier for object",
          "type": "string"
        },
        "href": {
          "description": "Href of the object",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "maxLength": 4096,
          "minLength": 0,
          "type": "string"
        },
        "status": {
          "default": "Pending",
          "type": "string"
        },
        "statusDetails": {
          "maxLength": 4096,
          "minLength": 0,
          "type": "string"
        },
        "typeOfResource": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "sizeOfResource": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "tierOfResource": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "execution": {
          "$ref": "#/definitions/Execution"
        },
        "taskVersionSummary": {
          "$ref": "#/definitions/TaskVersionSummary"
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskRunLogs"
          }
        },
        "executionRawJson": {
          "type": "string"
        },
        "acl": {
          "description": "Access Control List",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tenantId": {
          "type": "string"
        },
        "subTenantId": {
          "type": "string"
        },
        "createdBy": {
          "description": "User who created the object",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was created in TES",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User who updated the object",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was modified in TES",
          "type": "string"
        }
      }
    },
    "ClusterSummary": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Global identifier for object",
          "type": "string"
        },
        "href": {
          "description": "Href of the object",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "svcAcctUId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "taskRuns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskRun"
          }
        },
        "acl": {
          "description": "Access Control List",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tenantId": {
          "type": "string"
        },
        "subTenantId": {
          "type": "string"
        },
        "createdBy": {
          "description": "User who created the object",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was created in TES",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User who updated the object",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was modified in TES",
          "type": "string"
        }
      }
    },
    "ClusterSummaryPagedItems": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterSummary"
          }
        },
        "itemCount": {
          "format": "int32",
          "type": "integer"
        },
        "firstPageToken": {
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "prevPageToken": {
          "type": "string"
        },
        "lastPageToken": {
          "type": "string"
        },
        "totalItemCount": {
          "format": "int64",
          "type": "integer"
        },
        "totalPageCount": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ErrorResponse.1": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "CreateClusterRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "svcAcctUId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "acl": {
          "description": "Access Control List",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Cluster": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Global identifier for object",
          "type": "string"
        },
        "href": {
          "description": "Href of the object",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "svcAcctUId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "taskRuns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskRun"
          }
        },
        "acl": {
          "description": "Access Control List",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tenantId": {
          "type": "string"
        },
        "subTenantId": {
          "type": "string"
        },
        "createdBy": {
          "description": "User who created the object",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was created in TES",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User who updated the object",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was modified in TES",
          "type": "string"
        }
      }
    },
    "UpdateClusterRequest": {
      "type": "object",
      "properties": {
        "name": {
          "description": "User-defined name of the cluster",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "svcAcctUId": {
          "description": "Service account user id to be associated with the cluster",
          "type": "string"
        },
        "status": {
          "description": "User-defined status of the cluster",
          "type": "string"
        },
        "type": {
          "description": "User-defined type of the cluster",
          "type": "string"
        },
        "acl": {
          "description": "Access Control List",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CheckOutQueuedTaskRunRequest": {
      "type": "object",
      "properties": {
        "computeType": {
          "description": "Type of the compute requested (Fpga and NonFpga)",
          "enum": [
            "Fpga",
            "NonFpga"
          ],
          "type": "string"
        }
      }
    },
    "AgentTaskRun": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Global identifier for object",
          "type": "string"
        },
        "href": {
          "description": "Href of the object",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "encryptionKey": {
          "type": "string"
        },
        "inputManifestUrl": {
          "type": "string"
        },
        "outputManifestUrl": {
          "type": "string"
        },
        "heartbeatManifestUrl": {
          "type": "string"
        },
        "outputTokenManifestUrl": {
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "maxLength": 4096,
          "minLength": 0,
          "type": "string"
        },
        "status": {
          "default": "Pending",
          "type": "string"
        },
        "statusDetails": {
          "maxLength": 4096,
          "minLength": 0,
          "type": "string"
        },
        "typeOfResource": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "sizeOfResource": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "tierOfResource": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "execution": {
          "$ref": "#/definitions/Execution"
        },
        "taskVersionSummary": {
          "$ref": "#/definitions/TaskVersionSummary"
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskRunLogs"
          }
        },
        "executionRawJson": {
          "type": "string"
        },
        "acl": {
          "description": "Access Control List",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tenantId": {
          "type": "string"
        },
        "subTenantId": {
          "type": "string"
        },
        "createdBy": {
          "description": "User who created the object",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was created in TES",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User who updated the object",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was modified in TES",
          "type": "string"
        }
      }
    },
    "TaskRunSummary": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Global identifier for object",
          "type": "string"
        },
        "href": {
          "description": "Href of the object",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "maxLength": 4096,
          "minLength": 0,
          "type": "string"
        },
        "status": {
          "default": "Pending",
          "type": "string"
        },
        "statusDetails": {
          "maxLength": 4096,
          "minLength": 0,
          "type": "string"
        },
        "typeOfResource": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "sizeOfResource": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "tierOfResource": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "taskVersionSummary": {
          "$ref": "#/definitions/TaskVersionSummary"
        },
        "acl": {
          "description": "Access Control List",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tenantId": {
          "type": "string"
        },
        "subTenantId": {
          "type": "string"
        },
        "createdBy": {
          "description": "User who created the object",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was created in TES",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User who updated the object",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was modified in TES",
          "type": "string"
        }
      }
    },
    "TaskRunSummaryPagedItems": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskRunSummary"
          }
        },
        "itemCount": {
          "format": "int32",
          "type": "integer"
        },
        "firstPageToken": {
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "prevPageToken": {
          "type": "string"
        },
        "lastPageToken": {
          "type": "string"
        },
        "totalItemCount": {
          "format": "int64",
          "type": "integer"
        },
        "totalPageCount": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "UpdateTaskRunStateRequest": {
      "type": "object",
      "properties": {
        "status": {
          "description": "New TaskRun status to be updated",
          "enum": [
            "CheckedOut",
            "Runnable",
            "Running",
            "Finalizing",
            "Completed",
            "FailedRestartable",
            "Failed",
            "Aborted",
            "TimedOut"
          ],
          "type": "string"
        },
        "statusDetails": {
          "description": "Description of the event that triggered the state change",
          "type": "string"
        },
        "startTime": {
          "format": "date-time",
          "description": "TaskRun execution start time",
          "type": "string"
        },
        "completionTime": {
          "format": "date-time",
          "description": "TaskRun execution completion time",
          "type": "string"
        }
      }
    },
    "TaskSummary": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Global identifier for object",
          "type": "string"
        },
        "href": {
          "description": "Href of the object",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "maxLength": 4096,
          "minLength": 0,
          "type": "string"
        },
        "acl": {
          "description": "Access Control List",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tenantId": {
          "type": "string"
        },
        "subTenantId": {
          "type": "string"
        },
        "createdBy": {
          "description": "User who created the object",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was created in TES",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User who updated the object",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was modified in TES",
          "type": "string"
        }
      }
    },
    "TaskSummaryPagedItems": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskSummary"
          }
        },
        "itemCount": {
          "format": "int32",
          "type": "integer"
        },
        "firstPageToken": {
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "prevPageToken": {
          "type": "string"
        },
        "lastPageToken": {
          "type": "string"
        },
        "totalItemCount": {
          "format": "int64",
          "type": "integer"
        },
        "totalPageCount": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "CreateTaskVersionRequest": {
      "required": [
        "version"
      ],
      "type": "object",
      "properties": {
        "version": {
          "description": "User-defined version of task version",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "User-defined description of task version",
          "maxLength": 4096,
          "minLength": 0,
          "type": "string"
        },
        "execution": {
          "$ref": "#/definitions/Execution"
        },
        "acl": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateTaskRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "User-defined name of the task",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "User-defined description of the task",
          "maxLength": 4096,
          "minLength": 0,
          "type": "string"
        },
        "acl": {
          "description": "Access Control List",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "taskVersions": {
          "description": "List of task versions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateTaskVersionRequest"
          }
        }
      }
    },
    "TaskVersion": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Global identifier for object",
          "type": "string"
        },
        "href": {
          "description": "Href of the object",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "version": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "maxLength": 4096,
          "minLength": 0,
          "type": "string"
        },
        "execution": {
          "$ref": "#/definitions/Execution"
        },
        "acl": {
          "description": "Access Control List",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tenantId": {
          "type": "string"
        },
        "subTenantId": {
          "type": "string"
        },
        "createdBy": {
          "description": "User who created the object",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was created in TES",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User who updated the object",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was modified in TES",
          "type": "string"
        }
      }
    },
    "Task": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Global identifier for object",
          "type": "string"
        },
        "href": {
          "description": "Href of the object",
          "type": "string"
        },
        "urn": {
          "description": "URN of the resource",
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "maxLength": 4096,
          "minLength": 0,
          "type": "string"
        },
        "taskVersions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskVersion"
          }
        },
        "acl": {
          "description": "Access Control List",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tenantId": {
          "type": "string"
        },
        "subTenantId": {
          "type": "string"
        },
        "createdBy": {
          "description": "User who created the object",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was created in TES",
          "type": "string"
        },
        "modifiedBy": {
          "description": "User who updated the object",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "Date and Time (in UTC) when object was modified in TES",
          "type": "string"
        }
      }
    },
    "UpdateTaskRequest": {
      "type": "object",
      "properties": {
        "name": {
          "description": "User-defined name of the task",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "User-defined description of the task",
          "maxLength": 4096,
          "minLength": 0,
          "type": "string"
        },
        "acl": {
          "description": "Access Control List",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateTaskRunRequest": {
      "type": "object",
      "properties": {
        "name": {
          "description": "User-defined name of the task run",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "User-defined description of the task run",
          "maxLength": 4096,
          "minLength": 0,
          "type": "string"
        },
        "acl": {
          "description": "Access Control List",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "execution": {
          "$ref": "#/definitions/Execution"
        }
      }
    },
    "ContainerStateWaiting": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ContainerStateRunning": {
      "type": "object",
      "properties": {
        "startedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "ContainerStateTerminated": {
      "type": "object",
      "properties": {
        "exitCode": {
          "format": "int32",
          "type": "integer"
        },
        "signal": {
          "format": "int32",
          "type": "integer"
        },
        "reason": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "startedAt": {
          "format": "date-time",
          "type": "string"
        },
        "finishedAt": {
          "format": "date-time",
          "type": "string"
        },
        "containerID": {
          "type": "string"
        }
      }
    },
    "ContainerState": {
      "type": "object",
      "properties": {
        "waiting": {
          "$ref": "#/definitions/ContainerStateWaiting"
        },
        "running": {
          "$ref": "#/definitions/ContainerStateRunning"
        },
        "terminated": {
          "$ref": "#/definitions/ContainerStateTerminated"
        }
      }
    },
    "ContainerStatus": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/ContainerState"
        }
      }
    },
    "HeartbeatTaskRunRequest": {
      "type": "object",
      "properties": {
        "lastHeartbeat": {
          "description": "LastHeartbeat",
          "type": "boolean"
        },
        "podName": {
          "type": "string"
        },
        "podUID": {
          "type": "string"
        },
        "podHardwareDetails": {
          "type": "string"
        },
        "jobRetryCount": {
          "format": "int32",
          "type": "integer"
        },
        "nonce": {
          "type": "string"
        },
        "containerStatus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerStatus"
          }
        }
      }
    },
    "TaskRunHeartbeat": {
      "type": "object",
      "properties": {
        "jwt": {
          "type": "string"
        }
      }
    },
    "TaskVersionSummaryPagedItems": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskVersionSummary"
          }
        },
        "itemCount": {
          "format": "int32",
          "type": "integer"
        },
        "firstPageToken": {
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "prevPageToken": {
          "type": "string"
        },
        "lastPageToken": {
          "type": "string"
        },
        "totalItemCount": {
          "format": "int64",
          "type": "integer"
        },
        "totalPageCount": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "UpdateTaskVersionRequest": {
      "type": "object",
      "properties": {
        "version": {
          "description": "User-defined version of task version",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "User-defined description of task version",
          "maxLength": 4096,
          "minLength": 0,
          "type": "string"
        },
        "execution": {
          "$ref": "#/definitions/Execution"
        },
        "acl": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "LaunchTaskRequest": {
      "type": "object",
      "properties": {
        "name": {
          "description": "User-defined name for the task run, if not specified version string of task version will be used",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "User-defined description for the task run, if not specified task version description will be used",
          "maxLength": 4096,
          "minLength": 0,
          "type": "string"
        },
        "arguments": {
          "description": "Arguments to launch a task run",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "acl": {
          "description": "Access Control List",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AWSS3ObjectStoreSetting": {
      "required": [
        "bucketName"
      ],
      "type": "object",
      "properties": {
        "bucketName": {
          "description": "The bucket name",
          "maxLength": 63,
          "minLength": 3,
          "type": "string"
        },
        "keyPrefix": {
          "description": "Key prefix within the bucket for GDS to operate within. Volumes may only be created within this prefix and the given credentials need only authorize\r\naccess here. If not set, default is to allow operation on the full bucket. No leading slash, and must end with a trailing slash.",
          "pattern": "^[^/].*$",
          "type": "string"
        },
        "serverSideEncryptionAlgorithm": {
          "description": "Used to specify the type of server-side encryption (SSE) to be used on the object provider.\r\nThis value is used to determine the Amazon S3 header \"x-amz-server-side-encryption\" value.\r\nFor example, specify \"AES256\" for SSE-S3, or \"AWS:KMS\" for SSE-KMS.\r\nBy default if none is specified, \"AES256\" will be used.",
          "type": "string"
        },
        "serverSideEncryptionKey": {
          "description": "Used to specify the serve-side encryption key that might be associated with the specified server-side encryption algorithm\r\nThis value can be the AWS KMS arn key, to be used for the Amazon S3 header \"x-amz-server-side-encryption-aws-kms-key-id\" value\r\nValue will be ignored if encryption is \"AES256\"",
          "type": "string"
        }
      }
    },
    "ArchiveStatuses": {
      "description": "The valid Archive Status values for files in GDS",
      "enum": [
        "None",
        "Archived",
        "Unarchiving"
      ],
      "type": "string"
    },
    "AwsS3PresignedUrlForUpload": {
      "description": "AwsS3PresignedUrlForUpload",
      "type": "object",
      "properties": {
        "singlePartUrl": {
          "description": "A single part presigned url for upload",
          "type": "string"
        },
        "multipartTemplate": {
          "description": "A url template for multi parts presigned url for upload",
          "type": "string"
        },
        "multipartSignatures": {
          "description": "Multi parts info that needs to be applied to the MultipartTemplate",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartInfo"
          }
        },
        "multipartUploadId": {
          "description": "Multi part upload id",
          "type": "string"
        },
        "serverSideEncryptionAlgorithm": {
          "description": "The server side encryption method used by S3.\r\nThis value is used to determine the Amazon S3 header \"x-amz-server-side-encryption\" value.\r\nPossible values: 'AES256' and 'aws:kms'.",
          "type": "string"
        },
        "serverSideEncryptionKey": {
          "description": "Server-side encryption key that might be associated with the specified server-side encryption algorithm\r\nThis value can be the AWS KMS arn key, to be used for the Amazon S3 header \"x-amz-server-side-encryption-aws-kms-key-id\" value\r\nThis is only used when ServerSideEncryptionAlgorithm is 'aws:kms'",
          "type": "string"
        }
      }
    },
    "AwsS3TemporaryReadOnlyCredentials": {
      "type": "object",
      "properties": {
        "access_Key_Id": {
          "description": "Access key for use with AWS S3",
          "type": "string"
        },
        "secret_Access_Key": {
          "description": "Secret key for use with AWS S3",
          "type": "string"
        },
        "session_Token": {
          "description": "Token for use with AWS S3",
          "type": "string"
        },
        "region": {
          "description": "AWS region the folder will/does reside in",
          "type": "string"
        },
        "bucketName": {
          "description": "AWS bucket the folder will/does reside in",
          "type": "string"
        },
        "keyPrefix": {
          "description": "AWS upload location for this folder",
          "type": "string"
        },
        "expirationDate": {
          "format": "date-time",
          "description": "expiration for temporary credentials",
          "type": "string"
        },
        "serviceUrl": {
          "description": "Service endpoint for accessing S3.\r\nThis is optional for AWS S3, but mandatory for other services like Taiwan Computing Cloud.",
          "type": "string"
        },
        "serverSideEncryptionAlgorithm": {
          "description": "Used to specify the type of server-side encryption (SSE) to be used on the object provider.\r\nThis value is used to determine the Amazon S3 header \"x-amz-server-side-encryption\" value.\r\nFor example, specify \"AES256\" for SSE-S3, or \"AWS:KMS\" for SSE-KMS.\r\nBy default if none is specified, \"AES256\" will be used.",
          "type": "string"
        },
        "serverSideEncryptionKey": {
          "description": "Used to specify the serve-side encryption key that might be associated with the specified server-side encryption algorithm\r\nThis value can be the AWS KMS arn key, to be used for the Amazon S3 header \"x-amz-server-side-encryption-aws-kms-key-id\" value\r\nValue will be ignored if encryption is \"AES256\"",
          "type": "string"
        }
      }
    },
    "AwsS3TemporaryUploadCredentials": {
      "description": "AwsS3TemporaryUploadCredentials",
      "type": "object",
      "properties": {
        "access_Key_Id": {
          "description": "Access key for use with AWS S3",
          "type": "string"
        },
        "secret_Access_Key": {
          "description": "Secret key for use with AWS S3",
          "type": "string"
        },
        "session_Token": {
          "description": "Token for use with AWS S3",
          "type": "string"
        },
        "region": {
          "description": "AWS region the folder will/does reside in",
          "type": "string"
        },
        "bucketName": {
          "description": "AWS bucket the folder will/does reside in",
          "type": "string"
        },
        "keyPrefix": {
          "description": "AWS upload location for this folder",
          "type": "string"
        },
        "expirationDate": {
          "format": "date-time",
          "description": "expiration for temporary credentials",
          "type": "string"
        },
        "serviceUrl": {
          "description": "Service endpoint for accessing S3.\r\nThis is optional for AWS S3, but mandatory for other services like Taiwan Computing Cloud.",
          "type": "string"
        },
        "serverSideEncryptionAlgorithm": {
          "description": "Used to specify the type of server-side encryption (SSE) to be used on the object provider.\r\nThis value is used to determine the Amazon S3 header \"x-amz-server-side-encryption\" value.\r\nFor example, specify \"AES256\" for SSE-S3, or \"AWS:KMS\" for SSE-KMS.\r\nBy default if none is specified, \"AES256\" will be used.",
          "type": "string"
        },
        "serverSideEncryptionKey": {
          "description": "Used to specify the serve-side encryption key that might be associated with the specified server-side encryption algorithm\r\nThis value can be the AWS KMS arn key, to be used for the Amazon S3 header \"x-amz-server-side-encryption-aws-kms-key-id\" value\r\nValue will be ignored if encryption is \"AES256\"",
          "type": "string"
        }
      }
    },
    "BulkFailedItem": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of resource that failed",
          "type": "string"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse"
        }
      }
    },
    "BulkFileUpdateItem": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of this file",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about this file and its contents"
        },
        "format": {
          "description": "The File's Format",
          "type": "string"
        },
        "formatEdam": {
          "description": "The File's Edam Format",
          "type": "string"
        },
        "lifeCycle": {
          "$ref": "#/definitions/FileLifeCycleSettings"
        }
      }
    },
    "BulkFileUpdateRequest": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkFileUpdateItem"
          }
        },
        "timeOutInSeconds": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "BulkFileUpdateResponse": {
      "type": "object",
      "properties": {
        "itemsFailed": {
          "description": "Items failed to be updated with error details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkUpdateFailedItem"
          }
        },
        "itemsUpdatedCount": {
          "format": "int32",
          "description": "Total items successfully updated",
          "type": "integer"
        },
        "itemsFailedCount": {
          "format": "int32",
          "description": "Total items failed to be updated",
          "type": "integer"
        }
      }
    },
    "BulkFolderMetadataUpdateRequest": {
      "description": "Request to bulk update metadata on folders and sub files.",
      "required": [
        "folderId"
      ],
      "type": "object",
      "properties": {
        "folderId": {
          "description": "Folder unique id.",
          "type": "string"
        },
        "fileStatus": {
          "description": "File status to filter on.",
          "type": "string"
        },
        "parentFolderMetadataUpdates": {
          "$ref": "#/definitions/MetadataUpdateRequest"
        },
        "childrenFoldersUpdates": {
          "$ref": "#/definitions/MetadataUpdateRequest"
        },
        "childrenFilesUpdates": {
          "$ref": "#/definitions/MetadataUpdateRequest"
        }
      }
    },
    "BulkFolderUpdateItem": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of this folder",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about this folder and its contents"
        }
      }
    },
    "BulkFolderUpdateRequest": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkFolderUpdateItem"
          }
        },
        "timeOutInSeconds": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "BulkFolderUpdateResponse": {
      "type": "object",
      "properties": {
        "itemsFailed": {
          "description": "Items failed to be updated with error details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkUpdateFailedItem"
          }
        },
        "itemsUpdatedCount": {
          "format": "int32",
          "description": "Total items successfully updated",
          "type": "integer"
        },
        "itemsFailedCount": {
          "format": "int32",
          "description": "Total items failed to be updated",
          "type": "integer"
        }
      }
    },
    "BulkMetadataUpdateOperationParameters": {
      "description": "Operation parameters for folder bulk metadata update operations",
      "type": "object",
      "properties": {
        "folderId": {
          "type": "string"
        },
        "folderPath": {
          "type": "string"
        },
        "volumeId": {
          "type": "string"
        },
        "fileStatus": {
          "type": "string"
        },
        "parentFolderMetadataUpdates": {
          "$ref": "#/definitions/MetadataUpdateRequest"
        },
        "childrenFoldersUpdates": {
          "$ref": "#/definitions/MetadataUpdateRequest"
        },
        "childrenFilesUpdates": {
          "$ref": "#/definitions/MetadataUpdateRequest"
        }
      }
    },
    "BulkUpdateFailedItem": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of resource that failed to be updated",
          "type": "string"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse"
        }
      }
    },
    "CompleteSessionRequest": {
      "required": [
        "expectedSessionFileCount"
      ],
      "type": "object",
      "properties": {
        "expectedSessionFileCount": {
          "format": "int32",
          "description": "User-defined count used for reconciling files uploaded when closing the session",
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "CreateFileRequest": {
      "description": "CreateFileRequest Model",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the file to be uploaded, case sensitive.",
          "pattern": "^[^/]+$",
          "type": "string"
        },
        "volumeId": {
          "description": "Volume ID to which the file will be uploaded",
          "type": "string"
        },
        "folderPath": {
          "description": "Optional folder path where the file will be uploaded to",
          "type": "string"
        },
        "type": {
          "description": "Optional file content type, e.g. text/plain, application/json",
          "type": "string"
        },
        "volumeName": {
          "description": "Name of the Volume",
          "type": "string"
        },
        "format": {
          "description": "The File's Format",
          "type": "string"
        },
        "formatEdam": {
          "description": "The File's Edam Format",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about this file and its contents"
        }
      }
    },
    "CreateFolderRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Folder name, unique to this path, for the folder being created",
          "pattern": "^[^/]+$",
          "type": "string"
        },
        "folderPath": {
          "description": "Path from the root folder to the location for the folder being created; must start and end with '/'",
          "type": "string"
        },
        "volumeId": {
          "description": "The unique identifier for this Folder's Volume",
          "type": "string"
        },
        "volumeName": {
          "description": "The unique name for the Folder's Volume",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about this folder and its contents"
        },
        "acl": {
          "description": "Optional array to replace the acl on the resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateSessionRequest": {
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Metadata about this session and its contents"
        }
      }
    },
    "CreateSessionResponse": {
      "type": "object",
      "properties": {
        "objectStoreAccess": {
          "$ref": "#/definitions/ObjectStoreAccess"
        },
        "id": {
          "description": "A unique identifier for this Session",
          "type": "string"
        },
        "folderUrn": {
          "description": "The Universal Resource Name of the Folder associated with the Session",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/SessionStatus"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "The date & time this Session was created, in GDS",
          "type": "string"
        },
        "timeCredentialsExpire": {
          "format": "date-time",
          "description": "The date & time this upload session expires",
          "type": "string"
        },
        "timeClosed": {
          "format": "date-time",
          "description": "The date & time this Session was closed, in GDS",
          "type": "string"
        },
        "timeCompleted": {
          "format": "date-time",
          "description": "The date & time this Session was completed, in GDS",
          "type": "string"
        },
        "metadata": {}
      }
    },
    "CreateVolumeConfigurationRequest": {
      "required": [
        "name",
        "objectStoreSettings"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name for the volume configuration",
          "type": "string"
        },
        "versioningEnabled": {
          "description": "Versioning Enabled or Suspended for the ObjectContainer",
          "type": "boolean"
        },
        "objectStoreSettings": {
          "$ref": "#/definitions/ObjectStoreSettings"
        },
        "restoreType": {
          "$ref": "#/definitions/RestoreType"
        }
      }
    },
    "CreateVolumeRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name for the volume",
          "type": "string"
        },
        "volumeConfigurationName": {
          "description": "Unique name of the volume configuration to use",
          "type": "string"
        },
        "rootKeyPrefix": {
          "description": "The base bucket location for volumes associated with custom VolumeConfigurations. If not provided, the given volume Name is used.\r\nIf provided, it must start with the VolumeConfiguration's keyprefix and end with a /.\r\nTo create a volume representing the root of a bucket, use the value '/'.",
          "pattern": "^(/)$|^([^/].*[/])$",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about this volume and its contents"
        },
        "lifeCycle": {
          "$ref": "#/definitions/VolumeLifeCycleSettings"
        }
      }
    },
    "CreateVolumeResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique identifier for this Volume",
          "type": "string"
        },
        "name": {
          "description": "The name of this Volume",
          "type": "string"
        },
        "tenantId": {
          "description": "The unique identifier for this Volume's Tenant",
          "type": "string"
        },
        "subTenantId": {
          "description": "The unique identifier for this Volume's Sub Tenant",
          "type": "string"
        },
        "urn": {
          "description": "The Universal Resource Name, unique to this Volume",
          "type": "string"
        },
        "rootFolderId": {
          "description": "The unique identifier for the root Folder of this Volume",
          "type": "string"
        },
        "rootKeyPrefix": {
          "description": "The base bucket location for Volumes associated with custom VolumeConfigurations otherwise this field is not set.",
          "type": "string"
        },
        "volumeConfigurationName": {
          "description": "Unique name of the Volume configuration for this Volume.\r\nThis field will only be set if a custom Volume configuration is associated.",
          "type": "string"
        },
        "inheritedAcl": {
          "description": "The inherited list of Id(s) that have access to this Volume",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timeCreated": {
          "format": "date-time",
          "description": "The date & time this Volume was created, in GDS",
          "type": "string"
        },
        "createdBy": {
          "description": "The creator of this Volume",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "The date & time this Volume was updated, in GDS",
          "type": "string"
        },
        "modifiedBy": {
          "description": "The updator of this Volume",
          "type": "string"
        },
        "jobStatus": {
          "$ref": "#/definitions/JobStatus"
        },
        "metadata": {
          "description": "Metadata about this Volume"
        },
        "lifeCycle": {
          "$ref": "#/definitions/VolumeLifeCycleSettings"
        },
        "migrationStatus": {
          "description": "Status of the root folder migration status from v1 to v2",
          "type": "string"
        },
        "importSessionId": {
          "description": "Unique identifier of the import Session for this Volume. This only applies to Volumes created from custom\r\nVolume configurations.",
          "type": "string"
        },
        "objectStoreAccess": {
          "$ref": "#/definitions/ObjectStoreAccess"
        }
      }
    },
    "ErrorResponse.2": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code that uniquely identifies the type of error that occurred",
          "type": "string"
        },
        "message": {
          "description": "Description of the error that occurred",
          "type": "string"
        },
        "details": {
          "description": "Additional details for conditions that caused the error",
          "type": "array",
          "items": {}
        }
      }
    },
    "FileArchiveRequest": {
      "description": "FileArchiveRequest to specify the Storage Tier",
      "required": [
        "storageTier"
      ],
      "type": "object",
      "properties": {
        "storageTier": {
          "$ref": "#/definitions/FileArchiveStorageTier"
        }
      }
    },
    "FileArchiveStorageTier": {
      "enum": [
        "Archive",
        "DeepArchive"
      ],
      "type": "string"
    },
    "FileCopyOperationParameters": {
      "description": "Operation parameters for folder copy operations",
      "type": "object",
      "properties": {
        "sourceVolumeId": {
          "type": "string"
        },
        "sourceFileIds": {
          "description": "The file Ids for the copy operation",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "targetFolderId": {
          "type": "string"
        },
        "metadataToCopy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "duplicateFileAction": {
          "type": "string"
        }
      }
    },
    "FileCopyOutput": {
      "type": "object",
      "properties": {
        "itemsSkippedCount": {
          "format": "int32",
          "type": "integer"
        },
        "itemsFailedCount": {
          "format": "int32",
          "type": "integer"
        },
        "itemsCopiedCount": {
          "format": "int32",
          "type": "integer"
        },
        "elasticIndexingMatched": {
          "type": "boolean"
        },
        "itemsFailed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkFailedItem"
          }
        }
      }
    },
    "FileLifeCycleSettings": {
      "type": "object",
      "properties": {
        "timeGracePeriodEnds": {
          "format": "date-time",
          "description": "If set, date when billing for the file will start",
          "type": "string"
        },
        "timeToBeArchived": {
          "format": "date-time",
          "description": "If set, date when file will be archived",
          "type": "string"
        },
        "timeToBeDeleted": {
          "format": "date-time",
          "description": "If set, date when file will be deleted",
          "type": "string"
        },
        "archiveStorageTier": {
          "$ref": "#/definitions/FileArchiveStorageTier"
        }
      }
    },
    "FileListCopyRequest": {
      "required": [
        "destinationFolderId",
        "ids",
        "sourceVolumeId"
      ],
      "type": "object",
      "properties": {
        "sourceVolumeId": {
          "description": "The volume where the source files are copied from.",
          "type": "string"
        },
        "destinationFolderId": {
          "description": "The folder into which the source folder will be copied.",
          "type": "string"
        },
        "ids": {
          "description": "List of files ids to copy",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadataToCopy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "duplicateFileAction": {
          "type": "string"
        }
      }
    },
    "FileListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "description": "Items in paged list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileResponse"
          }
        },
        "itemCount": {
          "format": "int32",
          "description": "Number of items included in the page",
          "type": "integer"
        },
        "firstPageToken": {
          "description": "PageToken for first paged list",
          "type": "string"
        },
        "nextPageToken": {
          "description": "PageToken for the next paged list",
          "type": "string"
        },
        "prevPageToken": {
          "description": "PageToken for the previous paged list",
          "type": "string"
        },
        "lastPageToken": {
          "description": "PageToken for the last paged list. Only included when totalItemCount is listed",
          "type": "string"
        },
        "totalItemCount": {
          "format": "int64",
          "description": "Total number of items in all pages. Only included when requested",
          "type": "integer"
        },
        "totalPageCount": {
          "format": "int64",
          "description": "Total number of pages. Only included when totalItemCount is listed",
          "type": "integer"
        }
      }
    },
    "FileResponse": {
      "type": "object",
      "properties": {
        "volumeMetadata": {
          "description": "Metadata about this file's volume"
        },
        "copyJobId": {
          "description": "Job that copied the file",
          "type": "string"
        },
        "id": {
          "description": "A unique identifier for this File",
          "type": "string"
        },
        "name": {
          "description": "The name of this File",
          "type": "string"
        },
        "volumeId": {
          "description": "The unique identifier of the volume where the file resides",
          "type": "string"
        },
        "parentFolderId": {
          "description": "The unique identifier of the folder where the file resides",
          "type": "string"
        },
        "volumeName": {
          "description": "The name of the volume where the file resides",
          "type": "string"
        },
        "volumeConfigurationName": {
          "description": "The name of the volume configuration (BYOB only)",
          "type": "string"
        },
        "type": {
          "description": "The type of the File",
          "type": "string"
        },
        "tenantId": {
          "description": "The unique identifier for this File's Tenant",
          "type": "string"
        },
        "subTenantId": {
          "description": "The unique identifier for this File's Sub Tenant",
          "type": "string"
        },
        "path": {
          "description": "The (GDS) path to this File",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "The date & time this File was created, in GDS",
          "type": "string"
        },
        "createdBy": {
          "description": "The creator of this File",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "The date & time this File was updated, in GDS",
          "type": "string"
        },
        "modifiedBy": {
          "description": "The updator of this File",
          "type": "string"
        },
        "inheritedAcl": {
          "description": "The inherited list of Id(s) that have access to this File",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "urn": {
          "description": "The Universal Resource Name, unique to this File",
          "type": "string"
        },
        "sizeInBytes": {
          "format": "int64",
          "description": "The File's Size in bytes",
          "type": "integer"
        },
        "metadata": {
          "description": "Metadata about this File"
        },
        "isUploaded": {
          "description": "The current upload state of the File",
          "type": "boolean"
        },
        "archiveStatus": {
          "$ref": "#/definitions/ArchiveStatuses"
        },
        "timeArchived": {
          "format": "date-time",
          "description": "The date & time this File was archived",
          "type": "string"
        },
        "storageTier": {
          "$ref": "#/definitions/StorageTier"
        },
        "eTag": {
          "description": "The File's ETag",
          "type": "string"
        },
        "format": {
          "description": "The File's Format",
          "type": "string"
        },
        "formatEdam": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/FileStatus"
        },
        "lifeCycle": {
          "$ref": "#/definitions/FileLifeCycleSettings"
        },
        "versionId": {
          "description": "Id of the latest version of the object in the object container",
          "type": "string"
        },
        "presignedUrl": {
          "description": "The presigned Url allowing access to this File",
          "type": "string"
        },
        "objectStoreAccess": {
          "$ref": "#/definitions/ObjectStoreAccess"
        }
      }
    },
    "FileStatus": {
      "enum": [
        "Partial",
        "Available",
        "Archived",
        "Unarchiving",
        "Copying"
      ],
      "type": "string"
    },
    "FileUnarchiveRequest": {
      "description": "FileUnarchiveRequest to specify the RestoreSpeed",
      "required": [
        "restoreSpeed"
      ],
      "type": "object",
      "properties": {
        "restoreSpeed": {
          "description": "The desired Restore Speed to move the File to the Standard Storage Tier. Valid values are Economy and Standard.",
          "type": "string"
        }
      }
    },
    "FileUploadCompleteRequest": {
      "description": "FileUploadCompleteRequest",
      "type": "object",
      "properties": {
        "multipartUploadId": {
          "description": "The multipart upload id used by the object store",
          "type": "string"
        },
        "partEtags": {
          "description": "etags for each uploaded part (optional for files that uses multipart upload)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartEtag"
          }
        }
      }
    },
    "FileWriteableResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique identifier for this File",
          "type": "string"
        },
        "name": {
          "description": "The name of this File",
          "type": "string"
        },
        "volumeId": {
          "description": "The unique identifier of the volume where the file resides",
          "type": "string"
        },
        "parentFolderId": {
          "description": "The unique identifier of the folder where the file resides",
          "type": "string"
        },
        "volumeName": {
          "description": "The name of the volume where the file resides",
          "type": "string"
        },
        "volumeConfigurationName": {
          "description": "The name of the volume configuration (BYOB only)",
          "type": "string"
        },
        "type": {
          "description": "The type of the File",
          "type": "string"
        },
        "tenantId": {
          "description": "The unique identifier for this File's Tenant",
          "type": "string"
        },
        "subTenantId": {
          "description": "The unique identifier for this File's Sub Tenant",
          "type": "string"
        },
        "path": {
          "description": "The (GDS) path to this File",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "The date & time this File was created, in GDS",
          "type": "string"
        },
        "createdBy": {
          "description": "The creator of this File",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "The date & time this File was updated, in GDS",
          "type": "string"
        },
        "modifiedBy": {
          "description": "The updator of this File",
          "type": "string"
        },
        "inheritedAcl": {
          "description": "The inherited list of Id(s) that have access to this File",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "urn": {
          "description": "The Universal Resource Name, unique to this File",
          "type": "string"
        },
        "sizeInBytes": {
          "format": "int64",
          "description": "The File's Size in bytes",
          "type": "integer"
        },
        "metadata": {
          "description": "Metadata about this File"
        },
        "isUploaded": {
          "description": "The current upload state of the File",
          "type": "boolean"
        },
        "archiveStatus": {
          "$ref": "#/definitions/ArchiveStatuses"
        },
        "timeArchived": {
          "format": "date-time",
          "description": "The date & time this File was archived",
          "type": "string"
        },
        "storageTier": {
          "$ref": "#/definitions/StorageTier"
        },
        "eTag": {
          "description": "The File's ETag",
          "type": "string"
        },
        "format": {
          "description": "The File's Format",
          "type": "string"
        },
        "formatEdam": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/FileStatus"
        },
        "lifeCycle": {
          "$ref": "#/definitions/FileLifeCycleSettings"
        },
        "versionId": {
          "description": "Id of the latest version of the object in the object container",
          "type": "string"
        },
        "objectStoreAccess": {
          "$ref": "#/definitions/ObjectStoreAccess"
        }
      }
    },
    "FolderArchiveRequest": {
      "description": "FolderArchiveRequest to specify the Storage Tier",
      "required": [
        "storageTier"
      ],
      "type": "object",
      "properties": {
        "storageTier": {
          "$ref": "#/definitions/FolderArchiveStorageTier"
        }
      }
    },
    "FolderArchiveStorageTier": {
      "enum": [
        "Archive",
        "DeepArchive"
      ],
      "type": "string"
    },
    "FolderCopyOperationParameters": {
      "description": "Operation parameters for folder copy operations",
      "type": "object",
      "properties": {
        "sourceFolderUrn": {
          "description": "The Urn of the source folder for the copy operation",
          "type": "string"
        },
        "targetFolderUrn": {
          "description": "The Urn of the target folder for the copy operation",
          "type": "string"
        },
        "destinationFolderName": {
          "description": "The folder name for the copied folder",
          "type": "string"
        },
        "metadataToCopy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "duplicateFileAction": {
          "type": "string"
        },
        "copyUploadedFilesOnly": {
          "type": "boolean"
        },
        "sourceFolderId": {
          "type": "string"
        },
        "targetFolderId": {
          "type": "string"
        }
      }
    },
    "FolderCopyRequest": {
      "required": [
        "targetParentFolderId"
      ],
      "type": "object",
      "properties": {
        "targetParentFolderId": {
          "description": "The parent folder into which the source folder will be copied.",
          "type": "string"
        },
        "destinationFolderName": {
          "description": "A new name for the destination folder. Required if target parent folder is the same as the destination folder.\r\nWhen optional and not provided, the source folder name is used as the destination folder name.",
          "pattern": "^[^/]+$",
          "type": "string"
        },
        "metadataToCopy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "duplicateFileAction": {
          "type": "string"
        }
      }
    },
    "FolderDeleteOperationParameters": {
      "description": "Operation parameters for folder delete operations",
      "type": "object",
      "properties": {
        "folderUrn": {
          "description": "The Urn of the folder for the delete operation",
          "type": "string"
        }
      }
    },
    "FolderListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "description": "Items in paged list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FolderResponse"
          }
        },
        "itemCount": {
          "format": "int32",
          "description": "Number of items included in the page",
          "type": "integer"
        },
        "firstPageToken": {
          "description": "PageToken for first paged list",
          "type": "string"
        },
        "nextPageToken": {
          "description": "PageToken for the next paged list",
          "type": "string"
        },
        "prevPageToken": {
          "description": "PageToken for the previous paged list",
          "type": "string"
        },
        "lastPageToken": {
          "description": "PageToken for the last paged list. Only included when totalItemCount is listed",
          "type": "string"
        },
        "totalItemCount": {
          "format": "int64",
          "description": "Total number of items in all pages. Only included when requested",
          "type": "integer"
        },
        "totalPageCount": {
          "format": "int64",
          "description": "Total number of pages. Only included when totalItemCount is listed",
          "type": "integer"
        }
      }
    },
    "FolderResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique identifier for this Folder",
          "type": "string"
        },
        "name": {
          "description": "The name of this Folder",
          "type": "string"
        },
        "volumeId": {
          "description": "The unique identifier for this Folder's Volume",
          "type": "string"
        },
        "parentFolderId": {
          "description": "The unique identifier for this folder's parent folder",
          "type": "string"
        },
        "volumeName": {
          "description": "The name of this Folder's Volume",
          "type": "string"
        },
        "tenantId": {
          "description": "The unique identifier for this Folders's Tenant",
          "type": "string"
        },
        "subTenantId": {
          "description": "The unique identifier for this Folder's Sub Tenant",
          "type": "string"
        },
        "urn": {
          "description": "The Universal Resource Name, unique to this Folder",
          "type": "string"
        },
        "path": {
          "description": "The (GDS) folder path to this Folder",
          "type": "string"
        },
        "acl": {
          "description": "The list of directly specified Id(s) that have access to this Folder",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inheritedAcl": {
          "description": "The inherited list of Id(s) that have access to this Folder",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timeCreated": {
          "format": "date-time",
          "description": "The date & time this Folder was created, in GDS",
          "type": "string"
        },
        "createdBy": {
          "description": "The creator of this Folder",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "The date & time this Folder was updated, in GDS",
          "type": "string"
        },
        "modifiedBy": {
          "description": "The updator of this Folder",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about this folder"
        },
        "volumeMetadata": {
          "description": "Metadata about this folder's volume"
        },
        "jobStatus": {
          "$ref": "#/definitions/JobStatus"
        },
        "jobId": {
          "description": "The job identifier for the current folder operation. Currently only being used for the delete folder operation.",
          "type": "string"
        },
        "archiveJobStorageTier": {
          "$ref": "#/definitions/StorageTier"
        },
        "migrationStatus": {
          "description": "Status of the root folder migration status from v1 to v2",
          "type": "string"
        },
        "activeJobIds": {
          "description": "List of Jobs in Pending and In Progress status",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "objectStoreAccess": {
          "$ref": "#/definitions/ObjectStoreAccess"
        }
      }
    },
    "FolderUnarchiveRequest": {
      "required": [
        "restoreSpeed"
      ],
      "type": "object",
      "properties": {
        "restoreSpeed": {
          "description": "The desired Restore Speed to move the Files in the Folder to the Standard Storage Tier. Valid values are Economy and Standard.",
          "type": "string"
        }
      }
    },
    "FolderUpdateRequest": {
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Metadata about this folder and its contents"
        },
        "acl": {
          "description": "Optional array to replace the acl on the resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FolderWriteableResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique identifier for this Folder",
          "type": "string"
        },
        "name": {
          "description": "The name of this Folder",
          "type": "string"
        },
        "volumeId": {
          "description": "The unique identifier for this Folder's Volume",
          "type": "string"
        },
        "parentFolderId": {
          "description": "The unique identifier for this folder's parent folder",
          "type": "string"
        },
        "volumeName": {
          "description": "The name of this Folder's Volume",
          "type": "string"
        },
        "tenantId": {
          "description": "The unique identifier for this Folders's Tenant",
          "type": "string"
        },
        "subTenantId": {
          "description": "The unique identifier for this Folder's Sub Tenant",
          "type": "string"
        },
        "urn": {
          "description": "The Universal Resource Name, unique to this Folder",
          "type": "string"
        },
        "path": {
          "description": "The (GDS) folder path to this Folder",
          "type": "string"
        },
        "acl": {
          "description": "The list of directly specified Id(s) that have access to this Folder",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inheritedAcl": {
          "description": "The inherited list of Id(s) that have access to this Folder",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timeCreated": {
          "format": "date-time",
          "description": "The date & time this Folder was created, in GDS",
          "type": "string"
        },
        "createdBy": {
          "description": "The creator of this Folder",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "The date & time this Folder was updated, in GDS",
          "type": "string"
        },
        "modifiedBy": {
          "description": "The updator of this Folder",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about this folder"
        },
        "volumeMetadata": {
          "description": "Metadata about this folder's volume"
        },
        "jobStatus": {
          "$ref": "#/definitions/JobStatus"
        },
        "jobId": {
          "description": "The job identifier for the current folder operation. Currently only being used for the delete folder operation.",
          "type": "string"
        },
        "archiveJobStorageTier": {
          "$ref": "#/definitions/StorageTier"
        },
        "migrationStatus": {
          "description": "Status of the root folder migration status from v1 to v2",
          "type": "string"
        },
        "activeJobIds": {
          "description": "List of Jobs in Pending and In Progress status",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "objectStoreAccess": {
          "$ref": "#/definitions/ObjectStoreAccess"
        }
      }
    },
    "GracePeriodEndAction": {
      "enum": [
        "None",
        "Archive",
        "DeepArchive",
        "Delete"
      ],
      "type": "string"
    },
    "JobListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "description": "Items in paged list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobResponse"
          }
        },
        "itemCount": {
          "format": "int32",
          "description": "Number of items included in the page",
          "type": "integer"
        },
        "firstPageToken": {
          "description": "PageToken for first paged list",
          "type": "string"
        },
        "nextPageToken": {
          "description": "PageToken for the next paged list",
          "type": "string"
        },
        "prevPageToken": {
          "description": "PageToken for the previous paged list",
          "type": "string"
        },
        "lastPageToken": {
          "description": "PageToken for the last paged list. Only included when totalItemCount is listed",
          "type": "string"
        },
        "totalItemCount": {
          "format": "int64",
          "description": "Total number of items in all pages. Only included when requested",
          "type": "integer"
        },
        "totalPageCount": {
          "format": "int64",
          "description": "Total number of pages. Only included when totalItemCount is listed",
          "type": "integer"
        }
      }
    },
    "JobOperationParameters": {
      "description": "Container for XXXOperationParameters objects, which have additional details related to the specific job operation type.\r\nOnly one object will be populated.",
      "type": "object",
      "properties": {
        "folderCopy": {
          "$ref": "#/definitions/FolderCopyOperationParameters"
        },
        "folderDelete": {
          "$ref": "#/definitions/FolderDeleteOperationParameters"
        },
        "volumeMigration": {
          "$ref": "#/definitions/VolumeMigrationOperationParameters"
        },
        "fileCopy": {
          "$ref": "#/definitions/FileCopyOperationParameters"
        },
        "bulkMetadataUpdate": {
          "$ref": "#/definitions/BulkMetadataUpdateOperationParameters"
        }
      }
    },
    "JobOperationType": {
      "description": "The valid job operation type values for resources in GDS\r\nIMPORTANT - Please consider backward compatibility before adding a new enum value. Adding a new enum value will break the existing client using swagger SDK",
      "enum": [
        "Unknown",
        "FolderArchive",
        "FolderUnarchive",
        "FolderDelete",
        "FolderCopy"
      ],
      "type": "string"
    },
    "JobOutput": {
      "type": "object",
      "properties": {
        "folderCopy": {
          "$ref": "#/definitions/FileCopyOutput"
        },
        "fileCopy": {
          "$ref": "#/definitions/FileCopyOutput"
        },
        "folderMetadataUpdateOutput": {
          "$ref": "#/definitions/MetadataUpdateOutput"
        },
        "fileMetadataUpdateOutput": {
          "$ref": "#/definitions/MetadataUpdateOutput"
        }
      }
    },
    "JobProgressStatus": {
      "description": "The valid Job Status values for folders in GDS.\r\nIMPORTANT - Please consider backward compatibility before adding a new enum value. Adding a new enum value will break the existing client using swagger SDK",
      "enum": [
        "Pending",
        "InProgress",
        "Completed",
        "Failed",
        "CompletedWithError",
        "Aborted"
      ],
      "type": "string"
    },
    "JobResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique identifier for this Job",
          "type": "string"
        },
        "parentFolderUrn": {
          "description": "The Universal Resource Name of the parent folder associated with the Job",
          "type": "string"
        },
        "operationType": {
          "$ref": "#/definitions/JobOperationType"
        },
        "jobType": {
          "type": "string"
        },
        "operationParameters": {
          "$ref": "#/definitions/JobOperationParameters"
        },
        "results": {
          "$ref": "#/definitions/JobOutput"
        },
        "progressStatus": {
          "$ref": "#/definitions/JobProgressStatus"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "The date & time this Folder was created, in GDS",
          "type": "string"
        },
        "createdBy": {
          "description": "The creator of this Job",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "The date & time this Job was updated, in GDS",
          "type": "string"
        },
        "timeCompleted": {
          "format": "date-time",
          "description": "The date & time this Job was completed, in GDS",
          "type": "string"
        }
      }
    },
    "JobStatus": {
      "description": "This enum was originally created to store the type of job on a folder or file entity. \r\nThe Job entity is now used to track this information for copy operations, with the Illumina.Gds.Api.Models.Enums.JobOperationType \r\nand Illumina.Gds.Api.Models.Enums.JobProgressStatus used to record the type and progress status of the job.\r\nIMPORTANT - Please consider backward compatibility before adding a new enum value. Adding a new enum value will break the existing client using swagger SDK",
      "enum": [
        "None",
        "Archiving",
        "Unarchiving",
        "Deleting"
      ],
      "type": "string"
    },
    "MetadataUpdateOutput": {
      "type": "object",
      "properties": {
        "totalCount": {
          "format": "int64",
          "type": "integer"
        },
        "processedCount": {
          "format": "int64",
          "type": "integer"
        },
        "itemsFailedCount": {
          "format": "int64",
          "type": "integer"
        },
        "itemsFailed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkFailedItem"
          }
        }
      }
    },
    "MetadataUpdateRequest": {
      "description": "Metadata to update and/or delete.",
      "type": "object",
      "properties": {
        "updateMetadata": {
          "description": "Metadata to update."
        },
        "deleteMetadata": {
          "description": "Metadata to delete."
        }
      }
    },
    "ObjectStoreAccess": {
      "description": "ObjectStoreAccess to get the temporaryCredentials per provider",
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string"
        },
        "awsS3TemporaryUploadCredentials": {
          "$ref": "#/definitions/AwsS3TemporaryUploadCredentials"
        },
        "awsS3PresignedUrlForUpload": {
          "$ref": "#/definitions/AwsS3PresignedUrlForUpload"
        },
        "awsS3TemporaryReadOnlyCredentials": {
          "$ref": "#/definitions/AwsS3TemporaryReadOnlyCredentials"
        }
      }
    },
    "ObjectStoreSettings": {
      "type": "object",
      "properties": {
        "awsS3": {
          "$ref": "#/definitions/AWSS3ObjectStoreSetting"
        },
        "secretName": {
          "description": "Platform credentials Name\r\nMust provide either SecretId or SecretName",
          "type": "string"
        },
        "secretId": {
          "description": "Platform credentials Id\r\nMust provide either SecretId or SecretName",
          "type": "string"
        }
      }
    },
    "PartEtag": {
      "description": "PartEtag",
      "type": "object",
      "properties": {
        "part": {
          "format": "int32",
          "description": "Part number",
          "type": "integer",
          "example": 1
        },
        "etag": {
          "description": "Etag response for the part upload",
          "type": "string"
        }
      }
    },
    "PartInfo": {
      "description": "PartInfo of multi parts presigned url for upload",
      "type": "object",
      "properties": {
        "part": {
          "format": "int32",
          "description": "Part number to be applied to {part} in MultipartTemplate",
          "type": "integer"
        },
        "date": {
          "description": "Date to be applied to {date} in MultipartTemplate",
          "type": "string"
        },
        "dateTime": {
          "description": "DateTime to be applied to {datetime} in MultipartTemplate",
          "type": "string"
        },
        "signature": {
          "description": "Signature to be applied to {signature} in MultipartTemplate",
          "type": "string"
        }
      }
    },
    "RestoreType": {
      "description": "Object Restore Types in Storage Engine",
      "enum": [
        "Permanent",
        "Temporary"
      ],
      "type": "string"
    },
    "SessionResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique identifier for this Session",
          "type": "string"
        },
        "folderUrn": {
          "description": "The Universal Resource Name of the Folder associated with the Session",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/SessionStatus"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "The date & time this Session was created, in GDS",
          "type": "string"
        },
        "timeCredentialsExpire": {
          "format": "date-time",
          "description": "The date & time this upload session expires",
          "type": "string"
        },
        "timeClosed": {
          "format": "date-time",
          "description": "The date & time this Session was closed, in GDS",
          "type": "string"
        },
        "timeCompleted": {
          "format": "date-time",
          "description": "The date & time this Session was completed, in GDS",
          "type": "string"
        },
        "metadata": {}
      }
    },
    "SessionStatus": {
      "enum": [
        "Open",
        "Closed",
        "Completed",
        "CompletedWithError"
      ],
      "type": "string"
    },
    "StorageTier": {
      "description": "StorageTier",
      "enum": [
        "None",
        "Standard",
        "Archive",
        "DeepArchive"
      ],
      "type": "string"
    },
    "UpdateFileRequest": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The new file type (e.g. \"text/plain\").",
          "type": "string"
        },
        "format": {
          "description": "The File's Format",
          "type": "string"
        },
        "formatEdam": {
          "description": "The File's Edam Format",
          "type": "string"
        },
        "lifeCycle": {
          "$ref": "#/definitions/FileLifeCycleSettings"
        },
        "metadata": {
          "description": "Metadata about this file and its contents"
        }
      }
    },
    "UpdateVolumeRequest": {
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Metadata about this volume and its contents"
        },
        "lifeCycle": {
          "$ref": "#/definitions/VolumeLifeCycleSettings"
        }
      }
    },
    "VolumeConfigurationListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "description": "Items in paged list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VolumeConfigurationResponse"
          }
        },
        "itemCount": {
          "format": "int32",
          "description": "Number of items included in the page",
          "type": "integer"
        },
        "firstPageToken": {
          "description": "PageToken for first paged list",
          "type": "string"
        },
        "nextPageToken": {
          "description": "PageToken for the next paged list",
          "type": "string"
        },
        "prevPageToken": {
          "description": "PageToken for the previous paged list",
          "type": "string"
        },
        "lastPageToken": {
          "description": "PageToken for the last paged list. Only included when totalItemCount is listed",
          "type": "string"
        },
        "totalItemCount": {
          "format": "int64",
          "description": "Total number of items in all pages. Only included when requested",
          "type": "integer"
        },
        "totalPageCount": {
          "format": "int64",
          "description": "Total number of pages. Only included when totalItemCount is listed",
          "type": "integer"
        }
      }
    },
    "VolumeConfigurationOnlineStatus": {
      "description": "The valid Online Status values for Volume configurations in GDS",
      "enum": [
        "Initializing",
        "Ok",
        "Error"
      ],
      "type": "string"
    },
    "VolumeConfigurationResponse": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name for the volume configuration",
          "type": "string"
        },
        "versioningEnabled": {
          "description": "Versioning Enabled or Suspended for the ObjectContainer",
          "type": "boolean"
        },
        "tenantId": {
          "description": "The unique identifier for this Volume Configuration's Tenant",
          "type": "string"
        },
        "subTenantId": {
          "description": "The unique identifier for this Volume Configurations's Sub Tenant",
          "type": "string"
        },
        "urn": {
          "description": "The Universal Resource Name, unique to this Volume Configuration",
          "type": "string"
        },
        "onlineStatus": {
          "$ref": "#/definitions/VolumeConfigurationOnlineStatus"
        },
        "errorCode": {
          "description": "Error code returned from the object store",
          "type": "string"
        },
        "errorMessage": {
          "description": "Error message returned from the object store",
          "type": "string"
        },
        "timeOfLastError": {
          "format": "date-time",
          "description": "Timestamp of the last observed error.",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "The date & time this Volume was created, in GDS",
          "type": "string"
        },
        "createdBy": {
          "description": "The creator of this Volume",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "The date & time this Volume was updated, in GDS",
          "type": "string"
        },
        "modifiedBy": {
          "description": "The updator of this Volume",
          "type": "string"
        },
        "objectStoreSettings": {
          "$ref": "#/definitions/ObjectStoreSettings"
        }
      }
    },
    "VolumeFileListRequest": {
      "description": "Request for listing files within a volume",
      "type": "object",
      "properties": {
        "volumeId": {
          "description": "Volume identifier",
          "type": "string"
        },
        "fileIds": {
          "description": "File identifiers to list",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includePresignedUrl": {
          "description": "Optional parameter that returns presigned URL for each file when set to true",
          "type": "boolean"
        },
        "presignedUrlMode": {
          "description": "Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior.\r\nPossible values: Attachment, Inline, Browser",
          "type": "string"
        }
      }
    },
    "VolumeFileListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "description": "Retrieved files",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileResponse"
          }
        },
        "itemSuccessCount": {
          "format": "int32",
          "description": "Number of items that succeeded",
          "type": "integer"
        },
        "itemFailedCount": {
          "format": "int32",
          "description": "Number of items that failed",
          "type": "integer"
        },
        "itemsFailed": {
          "description": "Item failures with error details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkFailedItem"
          }
        }
      }
    },
    "VolumeLifeCycleSettings": {
      "type": "object",
      "properties": {
        "gracePeriodDays": {
          "format": "int32",
          "description": "Number of days before the files associated to this volume expires",
          "type": "integer"
        },
        "gracePeriodEndAction": {
          "$ref": "#/definitions/GracePeriodEndAction"
        }
      }
    },
    "VolumeListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "description": "Items in paged list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VolumeResponse"
          }
        },
        "itemCount": {
          "format": "int32",
          "description": "Number of items included in the page",
          "type": "integer"
        },
        "firstPageToken": {
          "description": "PageToken for first paged list",
          "type": "string"
        },
        "nextPageToken": {
          "description": "PageToken for the next paged list",
          "type": "string"
        },
        "prevPageToken": {
          "description": "PageToken for the previous paged list",
          "type": "string"
        },
        "lastPageToken": {
          "description": "PageToken for the last paged list. Only included when totalItemCount is listed",
          "type": "string"
        },
        "totalItemCount": {
          "format": "int64",
          "description": "Total number of items in all pages. Only included when requested",
          "type": "integer"
        },
        "totalPageCount": {
          "format": "int64",
          "description": "Total number of pages. Only included when totalItemCount is listed",
          "type": "integer"
        }
      }
    },
    "VolumeMigrationOperationParameters": {
      "description": "Operation parameters for volume migration operations",
      "type": "object",
      "properties": {
        "volumeId": {
          "description": "The volume id for the migration operation",
          "type": "string"
        }
      }
    },
    "VolumeResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique identifier for this Volume",
          "type": "string"
        },
        "name": {
          "description": "The name of this Volume",
          "type": "string"
        },
        "tenantId": {
          "description": "The unique identifier for this Volume's Tenant",
          "type": "string"
        },
        "subTenantId": {
          "description": "The unique identifier for this Volume's Sub Tenant",
          "type": "string"
        },
        "urn": {
          "description": "The Universal Resource Name, unique to this Volume",
          "type": "string"
        },
        "rootFolderId": {
          "description": "The unique identifier for the root Folder of this Volume",
          "type": "string"
        },
        "rootKeyPrefix": {
          "description": "The base bucket location for Volumes associated with custom VolumeConfigurations otherwise this field is not set.",
          "type": "string"
        },
        "volumeConfigurationName": {
          "description": "Unique name of the Volume configuration for this Volume.\r\nThis field will only be set if a custom Volume configuration is associated.",
          "type": "string"
        },
        "inheritedAcl": {
          "description": "The inherited list of Id(s) that have access to this Volume",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timeCreated": {
          "format": "date-time",
          "description": "The date & time this Volume was created, in GDS",
          "type": "string"
        },
        "createdBy": {
          "description": "The creator of this Volume",
          "type": "string"
        },
        "timeModified": {
          "format": "date-time",
          "description": "The date & time this Volume was updated, in GDS",
          "type": "string"
        },
        "modifiedBy": {
          "description": "The updator of this Volume",
          "type": "string"
        },
        "jobStatus": {
          "$ref": "#/definitions/JobStatus"
        },
        "metadata": {
          "description": "Metadata about this Volume"
        },
        "lifeCycle": {
          "$ref": "#/definitions/VolumeLifeCycleSettings"
        },
        "migrationStatus": {
          "description": "Status of the root folder migration status from v1 to v2",
          "type": "string"
        }
      }
    },
    "CreateSubscriptionRequest": {
      "required": [
        "deliveryTarget",
        "name",
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Event type which will be subscribed to",
          "maxLength": 255,
          "minLength": 1,
          "pattern": "^[a-zA-Z]+[.a-zA-Z]*$",
          "type": "string"
        },
        "actions": {
          "description": "Actions which will be subscribed to for the event type",
          "maxItems": 255,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name of the subscription",
          "maxLength": 255,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9_-]*$",
          "type": "string"
        },
        "description": {
          "description": "Optional description for the subscription",
          "maxLength": 8192,
          "type": "string"
        },
        "filterExpression": {
          "description": "JSON-structured filter expression for events matching the subscription",
          "maxLength": 8192,
          "type": "string"
        },
        "deliveryTarget": {
          "$ref": "#/definitions/DeliveryTarget"
        }
      },
      "additionalProperties": false
    },
    "DeliveryTarget": {
      "description": "Configuration for the action to perform for events matching this subscription; only one delivery type may be specified",
      "type": "object",
      "properties": {
        "awsSnsTopic": {
          "$ref": "#/definitions/DeliveryTargetAwsSnsTopic"
        },
        "awsSqsQueue": {
          "$ref": "#/definitions/DeliveryTargetAwsSqsQueue"
        },
        "workflowRunLaunch": {
          "$ref": "#/definitions/DeliveryTargetWorkflowRunLaunch"
        }
      },
      "additionalProperties": false
    },
    "DeliveryTargetAwsSnsTopic": {
      "description": "Configuration for an AWS SNS delivery topic",
      "required": [
        "topicArn"
      ],
      "type": "object",
      "properties": {
        "topicArn": {
          "description": "ARN for the AWS SNS topic",
          "minLength": 1,
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "DeliveryTargetAwsSqsQueue": {
      "description": "Configuration for an AWS SQS delivery queue",
      "required": [
        "queueUrl"
      ],
      "type": "object",
      "properties": {
        "queueUrl": {
          "description": "URL for the AWS SQS queue",
          "minLength": 1,
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "DeliveryTargetWorkflowRunLaunch": {
      "description": "Configuration for a delivery via WES workflow run launch",
      "required": [
        "id",
        "name",
        "version"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the workflow to launch",
          "minLength": 1,
          "type": "string"
        },
        "version": {
          "description": "Version of the workflow to launch, for the given id",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name for the workflowRun",
          "minLength": 1,
          "type": "string"
        },
        "input": {
          "description": "Arguments for the workflowRun"
        }
      },
      "additionalProperties": false
    },
    "ErrorResponse.3": {
      "description": "Details for an error which occurred",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code which uniquely identifies the type of error which occurred",
          "type": "string"
        },
        "message": {
          "description": "Description of the error which occurred",
          "type": "string"
        },
        "details": {
          "description": "Additional details for conditions which caused the error",
          "type": "array",
          "items": {}
        }
      },
      "additionalProperties": false
    },
    "SortDirection": {
      "enum": [
        "Asc",
        "Desc"
      ],
      "type": "string"
    },
    "Subscription": {
      "description": "Details for an Event Notification Service subscription",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique id of the subscription",
          "type": "string"
        },
        "urn": {
          "description": "URN of the subscription",
          "type": "string"
        },
        "type": {
          "description": "Type of event the subscription matches",
          "type": "string"
        },
        "actions": {
          "description": "Types of actions the subscription matches for the event type",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "filterExpression": {
          "description": "JSON-structured filter expression for events matching the subscription",
          "type": "string"
        },
        "name": {
          "description": "Name of the subscription",
          "type": "string"
        },
        "description": {
          "description": "Optional description for the subscription",
          "type": "string"
        },
        "deliveryTarget": {
          "$ref": "#/definitions/DeliveryTarget"
        },
        "matchIdentities": {
          "description": "ACL Identities for events the subscription matches",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "acl": {
          "description": "The list of identities that have access to this subscription",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tenantId": {
          "description": "Tenant id of the subscription owner",
          "type": "string"
        },
        "createdByUserId": {
          "description": "User id for the creator of the subscription",
          "type": "string"
        },
        "timeCreated": {
          "format": "date-time",
          "description": "Timestamp when the subscription was created",
          "type": "string"
        },
        "deletedByUserId": {
          "description": "Id of the user who deleted the subscription, if applicable",
          "type": "string"
        },
        "timeDeleted": {
          "format": "date-time",
          "description": "Timestamp when the subscription was deleted, if applicable",
          "type": "string"
        },
        "isDeleted": {
          "description": "Whether or not the subscription has been deleted",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "SubscriptionList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subscription"
          }
        },
        "itemCount": {
          "format": "int32",
          "type": "integer"
        },
        "firstPageToken": {
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "prevPageToken": {
          "type": "string"
        },
        "lastPageToken": {
          "type": "string"
        },
        "totalItemCount": {
          "format": "int64",
          "type": "integer"
        },
        "totalPageCount": {
          "format": "int64",
          "type": "integer"
        },
        "sortedBy": {
          "$ref": "#/definitions/SubscriptionListSortFields"
        },
        "sortDirection": {
          "$ref": "#/definitions/SortDirection"
        }
      },
      "additionalProperties": false
    },
    "SubscriptionListSortFields": {
      "enum": [
        "id"
      ],
      "type": "string"
    }
  }
}
